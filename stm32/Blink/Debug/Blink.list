
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004360  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044fc  080044fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080044fc  080044fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044fc  080044fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001240  20000010  08004514  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  08004514  00021250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c7d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cb9  00000000  00000000  00035cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001050  00000000  00000000  00038970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  000399c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f2ec  00000000  00000000  0003a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d538  00000000  00000000  00049bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005130c  00000000  00000000  000570fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a14  00000000  00000000  000a8484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004408 	.word	0x08004408

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004408 	.word	0x08004408

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f003 ffd3 	bl	80041dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f003 ff5b 	bl	80040f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  uwTick++;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <HAL_IncTick+0x14>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	1c5a      	adds	r2, r3, #1
 8000252:	4b02      	ldr	r3, [pc, #8]	; (800025c <HAL_IncTick+0x14>)
 8000254:	601a      	str	r2, [r3, #0]
}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000114c 	.word	0x2000114c

08000260 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  return uwTick;
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <HAL_GetTick+0x10>)
 8000266:	681b      	ldr	r3, [r3, #0]
}
 8000268:	0018      	movs	r0, r3
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	2000114c 	.word	0x2000114c

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	0002      	movs	r2, r0
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	001a      	movs	r2, r3
 8000286:	231f      	movs	r3, #31
 8000288:	401a      	ands	r2, r3
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <NVIC_EnableIRQ+0x28>)
 800028c:	2101      	movs	r1, #1
 800028e:	4091      	lsls	r1, r2
 8000290:	000a      	movs	r2, r1
 8000292:	601a      	str	r2, [r3, #0]
}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}
 800029c:	e000e100 	.word	0xe000e100

080002a0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	0002      	movs	r2, r0
 80002a8:	6039      	str	r1, [r7, #0]
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b7f      	cmp	r3, #127	; 0x7f
 80002b4:	d932      	bls.n	800031c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b6:	4a2f      	ldr	r2, [pc, #188]	; (8000374 <NVIC_SetPriority+0xd4>)
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	0019      	movs	r1, r3
 80002be:	230f      	movs	r3, #15
 80002c0:	400b      	ands	r3, r1
 80002c2:	3b08      	subs	r3, #8
 80002c4:	089b      	lsrs	r3, r3, #2
 80002c6:	3306      	adds	r3, #6
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	18d3      	adds	r3, r2, r3
 80002cc:	3304      	adds	r3, #4
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1dfa      	adds	r2, r7, #7
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	0011      	movs	r1, r2
 80002d6:	2203      	movs	r2, #3
 80002d8:	400a      	ands	r2, r1
 80002da:	00d2      	lsls	r2, r2, #3
 80002dc:	21ff      	movs	r1, #255	; 0xff
 80002de:	4091      	lsls	r1, r2
 80002e0:	000a      	movs	r2, r1
 80002e2:	43d2      	mvns	r2, r2
 80002e4:	401a      	ands	r2, r3
 80002e6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	019b      	lsls	r3, r3, #6
 80002ec:	22ff      	movs	r2, #255	; 0xff
 80002ee:	401a      	ands	r2, r3
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	0018      	movs	r0, r3
 80002f6:	2303      	movs	r3, #3
 80002f8:	4003      	ands	r3, r0
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	481d      	ldr	r0, [pc, #116]	; (8000374 <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	001c      	movs	r4, r3
 8000306:	230f      	movs	r3, #15
 8000308:	4023      	ands	r3, r4
 800030a:	3b08      	subs	r3, #8
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	430a      	orrs	r2, r1
 8000310:	3306      	adds	r3, #6
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	18c3      	adds	r3, r0, r3
 8000316:	3304      	adds	r3, #4
 8000318:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800031a:	e027      	b.n	800036c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031c:	4a16      	ldr	r2, [pc, #88]	; (8000378 <NVIC_SetPriority+0xd8>)
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	b25b      	sxtb	r3, r3
 8000324:	089b      	lsrs	r3, r3, #2
 8000326:	33c0      	adds	r3, #192	; 0xc0
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	589b      	ldr	r3, [r3, r2]
 800032c:	1dfa      	adds	r2, r7, #7
 800032e:	7812      	ldrb	r2, [r2, #0]
 8000330:	0011      	movs	r1, r2
 8000332:	2203      	movs	r2, #3
 8000334:	400a      	ands	r2, r1
 8000336:	00d2      	lsls	r2, r2, #3
 8000338:	21ff      	movs	r1, #255	; 0xff
 800033a:	4091      	lsls	r1, r2
 800033c:	000a      	movs	r2, r1
 800033e:	43d2      	mvns	r2, r2
 8000340:	401a      	ands	r2, r3
 8000342:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	019b      	lsls	r3, r3, #6
 8000348:	22ff      	movs	r2, #255	; 0xff
 800034a:	401a      	ands	r2, r3
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	0018      	movs	r0, r3
 8000352:	2303      	movs	r3, #3
 8000354:	4003      	ands	r3, r0
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800035a:	4807      	ldr	r0, [pc, #28]	; (8000378 <NVIC_SetPriority+0xd8>)
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	b25b      	sxtb	r3, r3
 8000362:	089b      	lsrs	r3, r3, #2
 8000364:	430a      	orrs	r2, r1
 8000366:	33c0      	adds	r3, #192	; 0xc0
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	501a      	str	r2, [r3, r0]
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b003      	add	sp, #12
 8000372:	bd90      	pop	{r4, r7, pc}
 8000374:	e000ed00 	.word	0xe000ed00
 8000378:	e000e100 	.word	0xe000e100

0800037c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	60b9      	str	r1, [r7, #8]
 8000384:	607a      	str	r2, [r7, #4]
 8000386:	210f      	movs	r1, #15
 8000388:	187b      	adds	r3, r7, r1
 800038a:	1c02      	adds	r2, r0, #0
 800038c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800038e:	68ba      	ldr	r2, [r7, #8]
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	b25b      	sxtb	r3, r3
 8000396:	0011      	movs	r1, r2
 8000398:	0018      	movs	r0, r3
 800039a:	f7ff ff81 	bl	80002a0 <NVIC_SetPriority>
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b004      	add	sp, #16
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	0002      	movs	r2, r0
 80003ae:	1dfb      	adds	r3, r7, #7
 80003b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	0018      	movs	r0, r3
 80003ba:	f7ff ff5b 	bl	8000274 <NVIC_EnableIRQ>
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003de:	e14f      	b.n	8000680 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2101      	movs	r1, #1
 80003e6:	697a      	ldr	r2, [r7, #20]
 80003e8:	4091      	lsls	r1, r2
 80003ea:	000a      	movs	r2, r1
 80003ec:	4013      	ands	r3, r2
 80003ee:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d100      	bne.n	80003f8 <HAL_GPIO_Init+0x30>
 80003f6:	e140      	b.n	800067a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d003      	beq.n	8000408 <HAL_GPIO_Init+0x40>
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	2b12      	cmp	r3, #18
 8000406:	d123      	bne.n	8000450 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	08da      	lsrs	r2, r3, #3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3208      	adds	r2, #8
 8000410:	0092      	lsls	r2, r2, #2
 8000412:	58d3      	ldr	r3, [r2, r3]
 8000414:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	2207      	movs	r2, #7
 800041a:	4013      	ands	r3, r2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	220f      	movs	r2, #15
 8000420:	409a      	lsls	r2, r3
 8000422:	0013      	movs	r3, r2
 8000424:	43da      	mvns	r2, r3
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	4013      	ands	r3, r2
 800042a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	691a      	ldr	r2, [r3, #16]
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	2107      	movs	r1, #7
 8000434:	400b      	ands	r3, r1
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	409a      	lsls	r2, r3
 800043a:	0013      	movs	r3, r2
 800043c:	693a      	ldr	r2, [r7, #16]
 800043e:	4313      	orrs	r3, r2
 8000440:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	08da      	lsrs	r2, r3, #3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3208      	adds	r2, #8
 800044a:	0092      	lsls	r2, r2, #2
 800044c:	6939      	ldr	r1, [r7, #16]
 800044e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	2203      	movs	r2, #3
 800045c:	409a      	lsls	r2, r3
 800045e:	0013      	movs	r3, r2
 8000460:	43da      	mvns	r2, r3
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	4013      	ands	r3, r2
 8000466:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	2203      	movs	r2, #3
 800046e:	401a      	ands	r2, r3
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	409a      	lsls	r2, r3
 8000476:	0013      	movs	r3, r2
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4313      	orrs	r3, r2
 800047c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	693a      	ldr	r2, [r7, #16]
 8000482:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d00b      	beq.n	80004a4 <HAL_GPIO_Init+0xdc>
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d007      	beq.n	80004a4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000498:	2b11      	cmp	r3, #17
 800049a:	d003      	beq.n	80004a4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	2b12      	cmp	r3, #18
 80004a2:	d130      	bne.n	8000506 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2203      	movs	r2, #3
 80004b0:	409a      	lsls	r2, r3
 80004b2:	0013      	movs	r3, r2
 80004b4:	43da      	mvns	r2, r3
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	4013      	ands	r3, r2
 80004ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	409a      	lsls	r2, r3
 80004c6:	0013      	movs	r3, r2
 80004c8:	693a      	ldr	r2, [r7, #16]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	693a      	ldr	r2, [r7, #16]
 80004d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80004da:	2201      	movs	r2, #1
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	409a      	lsls	r2, r3
 80004e0:	0013      	movs	r3, r2
 80004e2:	43da      	mvns	r2, r3
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	4013      	ands	r3, r2
 80004e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	091b      	lsrs	r3, r3, #4
 80004f0:	2201      	movs	r2, #1
 80004f2:	401a      	ands	r2, r3
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	409a      	lsls	r2, r3
 80004f8:	0013      	movs	r3, r2
 80004fa:	693a      	ldr	r2, [r7, #16]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	2203      	movs	r2, #3
 8000512:	409a      	lsls	r2, r3
 8000514:	0013      	movs	r3, r2
 8000516:	43da      	mvns	r2, r3
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	4013      	ands	r3, r2
 800051c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	409a      	lsls	r2, r3
 8000528:	0013      	movs	r3, r2
 800052a:	693a      	ldr	r2, [r7, #16]
 800052c:	4313      	orrs	r3, r2
 800052e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	055b      	lsls	r3, r3, #21
 800053e:	4013      	ands	r3, r2
 8000540:	d100      	bne.n	8000544 <HAL_GPIO_Init+0x17c>
 8000542:	e09a      	b.n	800067a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000544:	4b54      	ldr	r3, [pc, #336]	; (8000698 <HAL_GPIO_Init+0x2d0>)
 8000546:	699a      	ldr	r2, [r3, #24]
 8000548:	4b53      	ldr	r3, [pc, #332]	; (8000698 <HAL_GPIO_Init+0x2d0>)
 800054a:	2101      	movs	r1, #1
 800054c:	430a      	orrs	r2, r1
 800054e:	619a      	str	r2, [r3, #24]
 8000550:	4b51      	ldr	r3, [pc, #324]	; (8000698 <HAL_GPIO_Init+0x2d0>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	2201      	movs	r2, #1
 8000556:	4013      	ands	r3, r2
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800055c:	4a4f      	ldr	r2, [pc, #316]	; (800069c <HAL_GPIO_Init+0x2d4>)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	089b      	lsrs	r3, r3, #2
 8000562:	3302      	adds	r3, #2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	589b      	ldr	r3, [r3, r2]
 8000568:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	2203      	movs	r2, #3
 800056e:	4013      	ands	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	220f      	movs	r2, #15
 8000574:	409a      	lsls	r2, r3
 8000576:	0013      	movs	r3, r2
 8000578:	43da      	mvns	r2, r3
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	4013      	ands	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	2390      	movs	r3, #144	; 0x90
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	429a      	cmp	r2, r3
 8000588:	d013      	beq.n	80005b2 <HAL_GPIO_Init+0x1ea>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a44      	ldr	r2, [pc, #272]	; (80006a0 <HAL_GPIO_Init+0x2d8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d00d      	beq.n	80005ae <HAL_GPIO_Init+0x1e6>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a43      	ldr	r2, [pc, #268]	; (80006a4 <HAL_GPIO_Init+0x2dc>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d007      	beq.n	80005aa <HAL_GPIO_Init+0x1e2>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a42      	ldr	r2, [pc, #264]	; (80006a8 <HAL_GPIO_Init+0x2e0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d101      	bne.n	80005a6 <HAL_GPIO_Init+0x1de>
 80005a2:	2303      	movs	r3, #3
 80005a4:	e006      	b.n	80005b4 <HAL_GPIO_Init+0x1ec>
 80005a6:	2305      	movs	r3, #5
 80005a8:	e004      	b.n	80005b4 <HAL_GPIO_Init+0x1ec>
 80005aa:	2302      	movs	r3, #2
 80005ac:	e002      	b.n	80005b4 <HAL_GPIO_Init+0x1ec>
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <HAL_GPIO_Init+0x1ec>
 80005b2:	2300      	movs	r3, #0
 80005b4:	697a      	ldr	r2, [r7, #20]
 80005b6:	2103      	movs	r1, #3
 80005b8:	400a      	ands	r2, r1
 80005ba:	0092      	lsls	r2, r2, #2
 80005bc:	4093      	lsls	r3, r2
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80005c4:	4935      	ldr	r1, [pc, #212]	; (800069c <HAL_GPIO_Init+0x2d4>)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	089b      	lsrs	r3, r3, #2
 80005ca:	3302      	adds	r3, #2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005d2:	4b36      	ldr	r3, [pc, #216]	; (80006ac <HAL_GPIO_Init+0x2e4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	43da      	mvns	r2, r3
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	4013      	ands	r3, r2
 80005e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	025b      	lsls	r3, r3, #9
 80005ea:	4013      	ands	r3, r2
 80005ec:	d003      	beq.n	80005f6 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <HAL_GPIO_Init+0x2e4>)
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <HAL_GPIO_Init+0x2e4>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	43da      	mvns	r2, r3
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	4013      	ands	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	d003      	beq.n	8000620 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <HAL_GPIO_Init+0x2e4>)
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <HAL_GPIO_Init+0x2e4>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	43da      	mvns	r2, r3
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	4013      	ands	r3, r2
 8000634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	035b      	lsls	r3, r3, #13
 800063e:	4013      	ands	r3, r2
 8000640:	d003      	beq.n	800064a <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4313      	orrs	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_GPIO_Init+0x2e4>)
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <HAL_GPIO_Init+0x2e4>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	43da      	mvns	r2, r3
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	4013      	ands	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	039b      	lsls	r3, r3, #14
 8000668:	4013      	ands	r3, r2
 800066a:	d003      	beq.n	8000674 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4313      	orrs	r3, r2
 8000672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_GPIO_Init+0x2e4>)
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	40da      	lsrs	r2, r3
 8000688:	1e13      	subs	r3, r2, #0
 800068a:	d000      	beq.n	800068e <HAL_GPIO_Init+0x2c6>
 800068c:	e6a8      	b.n	80003e0 <HAL_GPIO_Init+0x18>
  } 
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b006      	add	sp, #24
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40021000 	.word	0x40021000
 800069c:	40010000 	.word	0x40010000
 80006a0:	48000400 	.word	0x48000400
 80006a4:	48000800 	.word	0x48000800
 80006a8:	48000c00 	.word	0x48000c00
 80006ac:	40010400 	.word	0x40010400

080006b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	000a      	movs	r2, r1
 80006ba:	1cbb      	adds	r3, r7, #2
 80006bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	691b      	ldr	r3, [r3, #16]
 80006c2:	1cba      	adds	r2, r7, #2
 80006c4:	8812      	ldrh	r2, [r2, #0]
 80006c6:	4013      	ands	r3, r2
 80006c8:	d004      	beq.n	80006d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80006ca:	230f      	movs	r3, #15
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e003      	b.n	80006dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80006d4:	230f      	movs	r3, #15
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	781b      	ldrb	r3, [r3, #0]
  }
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b004      	add	sp, #16
 80006e8:	bd80      	pop	{r7, pc}

080006ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	0008      	movs	r0, r1
 80006f4:	0011      	movs	r1, r2
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	1c02      	adds	r2, r0, #0
 80006fa:	801a      	strh	r2, [r3, #0]
 80006fc:	1c7b      	adds	r3, r7, #1
 80006fe:	1c0a      	adds	r2, r1, #0
 8000700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000702:	1c7b      	adds	r3, r7, #1
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d004      	beq.n	8000714 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800070a:	1cbb      	adds	r3, r7, #2
 800070c:	881a      	ldrh	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000712:	e003      	b.n	800071c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000714:	1cbb      	adds	r3, r7, #2
 8000716:	881a      	ldrh	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}

08000724 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	000a      	movs	r2, r1
 800072e:	1cbb      	adds	r3, r7, #2
 8000730:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	695a      	ldr	r2, [r3, #20]
 8000736:	1cbb      	adds	r3, r7, #2
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	405a      	eors	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	615a      	str	r2, [r3, #20]
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2201      	movs	r2, #1
 800075a:	4013      	ands	r3, r2
 800075c:	d100      	bne.n	8000760 <HAL_RCC_OscConfig+0x18>
 800075e:	e08d      	b.n	800087c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000760:	4bc3      	ldr	r3, [pc, #780]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	220c      	movs	r2, #12
 8000766:	4013      	ands	r3, r2
 8000768:	2b04      	cmp	r3, #4
 800076a:	d00e      	beq.n	800078a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800076c:	4bc0      	ldr	r3, [pc, #768]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	220c      	movs	r2, #12
 8000772:	4013      	ands	r3, r2
 8000774:	2b08      	cmp	r3, #8
 8000776:	d116      	bne.n	80007a6 <HAL_RCC_OscConfig+0x5e>
 8000778:	4bbd      	ldr	r3, [pc, #756]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	401a      	ands	r2, r3
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	025b      	lsls	r3, r3, #9
 8000786:	429a      	cmp	r2, r3
 8000788:	d10d      	bne.n	80007a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800078a:	4bb9      	ldr	r3, [pc, #740]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	029b      	lsls	r3, r3, #10
 8000792:	4013      	ands	r3, r2
 8000794:	d100      	bne.n	8000798 <HAL_RCC_OscConfig+0x50>
 8000796:	e070      	b.n	800087a <HAL_RCC_OscConfig+0x132>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d000      	beq.n	80007a2 <HAL_RCC_OscConfig+0x5a>
 80007a0:	e06b      	b.n	800087a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e2b6      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d107      	bne.n	80007be <HAL_RCC_OscConfig+0x76>
 80007ae:	4bb0      	ldr	r3, [pc, #704]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4baf      	ldr	r3, [pc, #700]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0249      	lsls	r1, r1, #9
 80007b8:	430a      	orrs	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e02f      	b.n	800081e <HAL_RCC_OscConfig+0xd6>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d10c      	bne.n	80007e0 <HAL_RCC_OscConfig+0x98>
 80007c6:	4baa      	ldr	r3, [pc, #680]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4ba9      	ldr	r3, [pc, #676]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007cc:	49a9      	ldr	r1, [pc, #676]	; (8000a74 <HAL_RCC_OscConfig+0x32c>)
 80007ce:	400a      	ands	r2, r1
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	4ba7      	ldr	r3, [pc, #668]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4ba6      	ldr	r3, [pc, #664]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007d8:	49a7      	ldr	r1, [pc, #668]	; (8000a78 <HAL_RCC_OscConfig+0x330>)
 80007da:	400a      	ands	r2, r1
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e01e      	b.n	800081e <HAL_RCC_OscConfig+0xd6>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b05      	cmp	r3, #5
 80007e6:	d10e      	bne.n	8000806 <HAL_RCC_OscConfig+0xbe>
 80007e8:	4ba1      	ldr	r3, [pc, #644]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4ba0      	ldr	r3, [pc, #640]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	02c9      	lsls	r1, r1, #11
 80007f2:	430a      	orrs	r2, r1
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	4b9e      	ldr	r3, [pc, #632]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b9d      	ldr	r3, [pc, #628]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0249      	lsls	r1, r1, #9
 8000800:	430a      	orrs	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	e00b      	b.n	800081e <HAL_RCC_OscConfig+0xd6>
 8000806:	4b9a      	ldr	r3, [pc, #616]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b99      	ldr	r3, [pc, #612]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 800080c:	4999      	ldr	r1, [pc, #612]	; (8000a74 <HAL_RCC_OscConfig+0x32c>)
 800080e:	400a      	ands	r2, r1
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	4b97      	ldr	r3, [pc, #604]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b96      	ldr	r3, [pc, #600]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000818:	4997      	ldr	r1, [pc, #604]	; (8000a78 <HAL_RCC_OscConfig+0x330>)
 800081a:	400a      	ands	r2, r1
 800081c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d014      	beq.n	8000850 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000826:	f7ff fd1b 	bl	8000260 <HAL_GetTick>
 800082a:	0003      	movs	r3, r0
 800082c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082e:	e008      	b.n	8000842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000830:	f7ff fd16 	bl	8000260 <HAL_GetTick>
 8000834:	0002      	movs	r2, r0
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b64      	cmp	r3, #100	; 0x64
 800083c:	d901      	bls.n	8000842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800083e:	2303      	movs	r3, #3
 8000840:	e268      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000842:	4b8b      	ldr	r3, [pc, #556]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	029b      	lsls	r3, r3, #10
 800084a:	4013      	ands	r3, r2
 800084c:	d0f0      	beq.n	8000830 <HAL_RCC_OscConfig+0xe8>
 800084e:	e015      	b.n	800087c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000850:	f7ff fd06 	bl	8000260 <HAL_GetTick>
 8000854:	0003      	movs	r3, r0
 8000856:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000858:	e008      	b.n	800086c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800085a:	f7ff fd01 	bl	8000260 <HAL_GetTick>
 800085e:	0002      	movs	r2, r0
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	2b64      	cmp	r3, #100	; 0x64
 8000866:	d901      	bls.n	800086c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000868:	2303      	movs	r3, #3
 800086a:	e253      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086c:	4b80      	ldr	r3, [pc, #512]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	d1f0      	bne.n	800085a <HAL_RCC_OscConfig+0x112>
 8000878:	e000      	b.n	800087c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800087a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2202      	movs	r2, #2
 8000882:	4013      	ands	r3, r2
 8000884:	d100      	bne.n	8000888 <HAL_RCC_OscConfig+0x140>
 8000886:	e069      	b.n	800095c <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000888:	4b79      	ldr	r3, [pc, #484]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	220c      	movs	r2, #12
 800088e:	4013      	ands	r3, r2
 8000890:	d00b      	beq.n	80008aa <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000892:	4b77      	ldr	r3, [pc, #476]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	220c      	movs	r2, #12
 8000898:	4013      	ands	r3, r2
 800089a:	2b08      	cmp	r3, #8
 800089c:	d11c      	bne.n	80008d8 <HAL_RCC_OscConfig+0x190>
 800089e:	4b74      	ldr	r3, [pc, #464]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	025b      	lsls	r3, r3, #9
 80008a6:	4013      	ands	r3, r2
 80008a8:	d116      	bne.n	80008d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008aa:	4b71      	ldr	r3, [pc, #452]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2202      	movs	r2, #2
 80008b0:	4013      	ands	r3, r2
 80008b2:	d005      	beq.n	80008c0 <HAL_RCC_OscConfig+0x178>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d001      	beq.n	80008c0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	e229      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c0:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	22f8      	movs	r2, #248	; 0xf8
 80008c6:	4393      	bics	r3, r2
 80008c8:	0019      	movs	r1, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	00da      	lsls	r2, r3, #3
 80008d0:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80008d2:	430a      	orrs	r2, r1
 80008d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d6:	e041      	b.n	800095c <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d024      	beq.n	800092a <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008e0:	4b63      	ldr	r3, [pc, #396]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b62      	ldr	r3, [pc, #392]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80008e6:	2101      	movs	r1, #1
 80008e8:	430a      	orrs	r2, r1
 80008ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ec:	f7ff fcb8 	bl	8000260 <HAL_GetTick>
 80008f0:	0003      	movs	r3, r0
 80008f2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f4:	e008      	b.n	8000908 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008f6:	f7ff fcb3 	bl	8000260 <HAL_GetTick>
 80008fa:	0002      	movs	r2, r0
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	2b02      	cmp	r3, #2
 8000902:	d901      	bls.n	8000908 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000904:	2303      	movs	r3, #3
 8000906:	e205      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000908:	4b59      	ldr	r3, [pc, #356]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2202      	movs	r2, #2
 800090e:	4013      	ands	r3, r2
 8000910:	d0f1      	beq.n	80008f6 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000912:	4b57      	ldr	r3, [pc, #348]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	22f8      	movs	r2, #248	; 0xf8
 8000918:	4393      	bics	r3, r2
 800091a:	0019      	movs	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	00da      	lsls	r2, r3, #3
 8000922:	4b53      	ldr	r3, [pc, #332]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	e018      	b.n	800095c <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800092a:	4b51      	ldr	r3, [pc, #324]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b50      	ldr	r3, [pc, #320]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000930:	2101      	movs	r1, #1
 8000932:	438a      	bics	r2, r1
 8000934:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000936:	f7ff fc93 	bl	8000260 <HAL_GetTick>
 800093a:	0003      	movs	r3, r0
 800093c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093e:	e008      	b.n	8000952 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000940:	f7ff fc8e 	bl	8000260 <HAL_GetTick>
 8000944:	0002      	movs	r2, r0
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	2b02      	cmp	r3, #2
 800094c:	d901      	bls.n	8000952 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800094e:	2303      	movs	r3, #3
 8000950:	e1e0      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000952:	4b47      	ldr	r3, [pc, #284]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2202      	movs	r2, #2
 8000958:	4013      	ands	r3, r2
 800095a:	d1f1      	bne.n	8000940 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2208      	movs	r2, #8
 8000962:	4013      	ands	r3, r2
 8000964:	d036      	beq.n	80009d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d019      	beq.n	80009a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800096e:	4b40      	ldr	r3, [pc, #256]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000972:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800097a:	f7ff fc71 	bl	8000260 <HAL_GetTick>
 800097e:	0003      	movs	r3, r0
 8000980:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000982:	e008      	b.n	8000996 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000984:	f7ff fc6c 	bl	8000260 <HAL_GetTick>
 8000988:	0002      	movs	r2, r0
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2b02      	cmp	r3, #2
 8000990:	d901      	bls.n	8000996 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000992:	2303      	movs	r3, #3
 8000994:	e1be      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099a:	2202      	movs	r2, #2
 800099c:	4013      	ands	r3, r2
 800099e:	d0f1      	beq.n	8000984 <HAL_RCC_OscConfig+0x23c>
 80009a0:	e018      	b.n	80009d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80009a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	438a      	bics	r2, r1
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ae:	f7ff fc57 	bl	8000260 <HAL_GetTick>
 80009b2:	0003      	movs	r3, r0
 80009b4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b6:	e008      	b.n	80009ca <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b8:	f7ff fc52 	bl	8000260 <HAL_GetTick>
 80009bc:	0002      	movs	r2, r0
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d901      	bls.n	80009ca <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80009c6:	2303      	movs	r3, #3
 80009c8:	e1a4      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	2202      	movs	r2, #2
 80009d0:	4013      	ands	r3, r2
 80009d2:	d1f1      	bne.n	80009b8 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2204      	movs	r2, #4
 80009da:	4013      	ands	r3, r2
 80009dc:	d100      	bne.n	80009e0 <HAL_RCC_OscConfig+0x298>
 80009de:	e0b5      	b.n	8000b4c <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009e0:	2317      	movs	r3, #23
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80009ea:	69da      	ldr	r2, [r3, #28]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	055b      	lsls	r3, r3, #21
 80009f0:	4013      	ands	r3, r2
 80009f2:	d111      	bne.n	8000a18 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80009f6:	69da      	ldr	r2, [r3, #28]
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	0549      	lsls	r1, r1, #21
 80009fe:	430a      	orrs	r2, r1
 8000a00:	61da      	str	r2, [r3, #28]
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000a04:	69da      	ldr	r2, [r3, #28]
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	055b      	lsls	r3, r3, #21
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a10:	2317      	movs	r3, #23
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_RCC_OscConfig+0x334>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4013      	ands	r3, r2
 8000a22:	d11a      	bne.n	8000a5a <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_RCC_OscConfig+0x334>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_RCC_OscConfig+0x334>)
 8000a2a:	2180      	movs	r1, #128	; 0x80
 8000a2c:	0049      	lsls	r1, r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a32:	f7ff fc15 	bl	8000260 <HAL_GetTick>
 8000a36:	0003      	movs	r3, r0
 8000a38:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3a:	e008      	b.n	8000a4e <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a3c:	f7ff fc10 	bl	8000260 <HAL_GetTick>
 8000a40:	0002      	movs	r2, r0
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	2b64      	cmp	r3, #100	; 0x64
 8000a48:	d901      	bls.n	8000a4e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e162      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_RCC_OscConfig+0x334>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4013      	ands	r3, r2
 8000a58:	d0f0      	beq.n	8000a3c <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10e      	bne.n	8000a80 <HAL_RCC_OscConfig+0x338>
 8000a62:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000a64:	6a1a      	ldr	r2, [r3, #32]
 8000a66:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <HAL_RCC_OscConfig+0x328>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	621a      	str	r2, [r3, #32]
 8000a6e:	e035      	b.n	8000adc <HAL_RCC_OscConfig+0x394>
 8000a70:	40021000 	.word	0x40021000
 8000a74:	fffeffff 	.word	0xfffeffff
 8000a78:	fffbffff 	.word	0xfffbffff
 8000a7c:	40007000 	.word	0x40007000
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10c      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x35a>
 8000a88:	4ba4      	ldr	r3, [pc, #656]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000a8a:	6a1a      	ldr	r2, [r3, #32]
 8000a8c:	4ba3      	ldr	r3, [pc, #652]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	438a      	bics	r2, r1
 8000a92:	621a      	str	r2, [r3, #32]
 8000a94:	4ba1      	ldr	r3, [pc, #644]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000a96:	6a1a      	ldr	r2, [r3, #32]
 8000a98:	4ba0      	ldr	r3, [pc, #640]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	438a      	bics	r2, r1
 8000a9e:	621a      	str	r2, [r3, #32]
 8000aa0:	e01c      	b.n	8000adc <HAL_RCC_OscConfig+0x394>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2b05      	cmp	r3, #5
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x37c>
 8000aaa:	4b9c      	ldr	r3, [pc, #624]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000aac:	6a1a      	ldr	r2, [r3, #32]
 8000aae:	4b9b      	ldr	r3, [pc, #620]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	621a      	str	r2, [r3, #32]
 8000ab6:	4b99      	ldr	r3, [pc, #612]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000ab8:	6a1a      	ldr	r2, [r3, #32]
 8000aba:	4b98      	ldr	r3, [pc, #608]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	621a      	str	r2, [r3, #32]
 8000ac2:	e00b      	b.n	8000adc <HAL_RCC_OscConfig+0x394>
 8000ac4:	4b95      	ldr	r3, [pc, #596]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000ac6:	6a1a      	ldr	r2, [r3, #32]
 8000ac8:	4b94      	ldr	r3, [pc, #592]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	438a      	bics	r2, r1
 8000ace:	621a      	str	r2, [r3, #32]
 8000ad0:	4b92      	ldr	r3, [pc, #584]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000ad2:	6a1a      	ldr	r2, [r3, #32]
 8000ad4:	4b91      	ldr	r3, [pc, #580]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	438a      	bics	r2, r1
 8000ada:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d014      	beq.n	8000b0e <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae4:	f7ff fbbc 	bl	8000260 <HAL_GetTick>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	e009      	b.n	8000b02 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aee:	f7ff fbb7 	bl	8000260 <HAL_GetTick>
 8000af2:	0002      	movs	r2, r0
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	4a89      	ldr	r2, [pc, #548]	; (8000d20 <HAL_RCC_OscConfig+0x5d8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d901      	bls.n	8000b02 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000afe:	2303      	movs	r3, #3
 8000b00:	e108      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b02:	4b86      	ldr	r3, [pc, #536]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b04:	6a1b      	ldr	r3, [r3, #32]
 8000b06:	2202      	movs	r2, #2
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d0f0      	beq.n	8000aee <HAL_RCC_OscConfig+0x3a6>
 8000b0c:	e013      	b.n	8000b36 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b0e:	f7ff fba7 	bl	8000260 <HAL_GetTick>
 8000b12:	0003      	movs	r3, r0
 8000b14:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b16:	e009      	b.n	8000b2c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b18:	f7ff fba2 	bl	8000260 <HAL_GetTick>
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	4a7f      	ldr	r2, [pc, #508]	; (8000d20 <HAL_RCC_OscConfig+0x5d8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d901      	bls.n	8000b2c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e0f3      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2c:	4b7b      	ldr	r3, [pc, #492]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	2202      	movs	r2, #2
 8000b32:	4013      	ands	r3, r2
 8000b34:	d1f0      	bne.n	8000b18 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b36:	2317      	movs	r3, #23
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d105      	bne.n	8000b4c <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b40:	4b76      	ldr	r3, [pc, #472]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b42:	69da      	ldr	r2, [r3, #28]
 8000b44:	4b75      	ldr	r3, [pc, #468]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b46:	4977      	ldr	r1, [pc, #476]	; (8000d24 <HAL_RCC_OscConfig+0x5dc>)
 8000b48:	400a      	ands	r2, r1
 8000b4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2210      	movs	r2, #16
 8000b52:	4013      	ands	r3, r2
 8000b54:	d063      	beq.n	8000c1e <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d12a      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b62:	4b6e      	ldr	r3, [pc, #440]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b64:	2104      	movs	r1, #4
 8000b66:	430a      	orrs	r2, r1
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000b6a:	4b6c      	ldr	r3, [pc, #432]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6e:	4b6b      	ldr	r3, [pc, #428]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b76:	f7ff fb73 	bl	8000260 <HAL_GetTick>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b7e:	e008      	b.n	8000b92 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b80:	f7ff fb6e 	bl	8000260 <HAL_GetTick>
 8000b84:	0002      	movs	r2, r0
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d901      	bls.n	8000b92 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e0c0      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b92:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	2202      	movs	r2, #2
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d0f1      	beq.n	8000b80 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b9c:	4b5f      	ldr	r3, [pc, #380]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba0:	22f8      	movs	r2, #248	; 0xf8
 8000ba2:	4393      	bics	r3, r2
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	00da      	lsls	r2, r3, #3
 8000bac:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb2:	e034      	b.n	8000c1e <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	3305      	adds	r3, #5
 8000bba:	d111      	bne.n	8000be0 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000bbc:	4b57      	ldr	r3, [pc, #348]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc0:	4b56      	ldr	r3, [pc, #344]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bc8:	4b54      	ldr	r3, [pc, #336]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bcc:	22f8      	movs	r2, #248	; 0xf8
 8000bce:	4393      	bics	r3, r2
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	00da      	lsls	r2, r3, #3
 8000bd8:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bde:	e01e      	b.n	8000c1e <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000be0:	4b4e      	ldr	r3, [pc, #312]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be4:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000be6:	2104      	movs	r1, #4
 8000be8:	430a      	orrs	r2, r1
 8000bea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000bec:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf0:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf8:	f7ff fb32 	bl	8000260 <HAL_GetTick>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c00:	e008      	b.n	8000c14 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c02:	f7ff fb2d 	bl	8000260 <HAL_GetTick>
 8000c06:	0002      	movs	r2, r0
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d901      	bls.n	8000c14 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e07f      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c18:	2202      	movs	r2, #2
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d1f1      	bne.n	8000c02 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d100      	bne.n	8000c28 <HAL_RCC_OscConfig+0x4e0>
 8000c26:	e074      	b.n	8000d12 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c28:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	220c      	movs	r2, #12
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d100      	bne.n	8000c36 <HAL_RCC_OscConfig+0x4ee>
 8000c34:	e06b      	b.n	8000d0e <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a1b      	ldr	r3, [r3, #32]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d14c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c3e:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c44:	4938      	ldr	r1, [pc, #224]	; (8000d28 <HAL_RCC_OscConfig+0x5e0>)
 8000c46:	400a      	ands	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4a:	f7ff fb09 	bl	8000260 <HAL_GetTick>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c54:	f7ff fb04 	bl	8000260 <HAL_GetTick>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e056      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	049b      	lsls	r3, r3, #18
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d1f0      	bne.n	8000c54 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	220f      	movs	r2, #15
 8000c78:	4393      	bics	r3, r2
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c82:	430a      	orrs	r2, r1
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4a28      	ldr	r2, [pc, #160]	; (8000d2c <HAL_RCC_OscConfig+0x5e4>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	0019      	movs	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0449      	lsls	r1, r1, #17
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cae:	f7ff fad7 	bl	8000260 <HAL_GetTick>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb8:	f7ff fad2 	bl	8000260 <HAL_GetTick>
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e024      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	049b      	lsls	r3, r3, #18
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d0f0      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x570>
 8000cd6:	e01c      	b.n	8000d12 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000cde:	4912      	ldr	r1, [pc, #72]	; (8000d28 <HAL_RCC_OscConfig+0x5e0>)
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fabc 	bl	8000260 <HAL_GetTick>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cee:	f7ff fab7 	bl	8000260 <HAL_GetTick>
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e009      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_RCC_OscConfig+0x5d4>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	049b      	lsls	r3, r3, #18
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d1f0      	bne.n	8000cee <HAL_RCC_OscConfig+0x5a6>
 8000d0c:	e001      	b.n	8000d12 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b006      	add	sp, #24
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	00001388 	.word	0x00001388
 8000d24:	efffffff 	.word	0xefffffff
 8000d28:	feffffff 	.word	0xfeffffff
 8000d2c:	ffc2ffff 	.word	0xffc2ffff

08000d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d3e:	4b6a      	ldr	r3, [pc, #424]	; (8000ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2201      	movs	r2, #1
 8000d44:	4013      	ands	r3, r2
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d911      	bls.n	8000d70 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d4c:	4b66      	ldr	r3, [pc, #408]	; (8000ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2201      	movs	r2, #1
 8000d52:	4393      	bics	r3, r2
 8000d54:	0019      	movs	r1, r3
 8000d56:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d5e:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d001      	beq.n	8000d70 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e0b6      	b.n	8000ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2202      	movs	r2, #2
 8000d76:	4013      	ands	r3, r2
 8000d78:	d009      	beq.n	8000d8e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d7a:	4b5c      	ldr	r3, [pc, #368]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	22f0      	movs	r2, #240	; 0xf0
 8000d80:	4393      	bics	r3, r2
 8000d82:	0019      	movs	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	4b58      	ldr	r3, [pc, #352]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	d100      	bne.n	8000d9a <HAL_RCC_ClockConfig+0x6a>
 8000d98:	e067      	b.n	8000e6a <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d107      	bne.n	8000db2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	4b52      	ldr	r3, [pc, #328]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	029b      	lsls	r3, r3, #10
 8000daa:	4013      	ands	r3, r2
 8000dac:	d114      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e095      	b.n	8000ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d107      	bne.n	8000dca <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dba:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	049b      	lsls	r3, r3, #18
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d108      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e089      	b.n	8000ede <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dca:	4b48      	ldr	r3, [pc, #288]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d101      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e082      	b.n	8000ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dd8:	4b44      	ldr	r3, [pc, #272]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4393      	bics	r3, r2
 8000de0:	0019      	movs	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	4b41      	ldr	r3, [pc, #260]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dec:	f7ff fa38 	bl	8000260 <HAL_GetTick>
 8000df0:	0003      	movs	r3, r0
 8000df2:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d111      	bne.n	8000e20 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfc:	e009      	b.n	8000e12 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dfe:	f7ff fa2f 	bl	8000260 <HAL_GetTick>
 8000e02:	0002      	movs	r2, r0
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	4a39      	ldr	r2, [pc, #228]	; (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e065      	b.n	8000ede <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	220c      	movs	r2, #12
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d1ef      	bne.n	8000dfe <HAL_RCC_ClockConfig+0xce>
 8000e1e:	e024      	b.n	8000e6a <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d11b      	bne.n	8000e60 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e28:	e009      	b.n	8000e3e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e2a:	f7ff fa19 	bl	8000260 <HAL_GetTick>
 8000e2e:	0002      	movs	r2, r0
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e04f      	b.n	8000ede <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	220c      	movs	r2, #12
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d1ef      	bne.n	8000e2a <HAL_RCC_ClockConfig+0xfa>
 8000e4a:	e00e      	b.n	8000e6a <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4c:	f7ff fa08 	bl	8000260 <HAL_GetTick>
 8000e50:	0002      	movs	r2, r0
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e03e      	b.n	8000ede <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	220c      	movs	r2, #12
 8000e66:	4013      	ands	r3, r2
 8000e68:	d1f0      	bne.n	8000e4c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4013      	ands	r3, r2
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d211      	bcs.n	8000e9c <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4393      	bics	r3, r2
 8000e80:	0019      	movs	r1, r3
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4013      	ands	r3, r2
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d001      	beq.n	8000e9c <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e020      	b.n	8000ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d009      	beq.n	8000eba <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	0019      	movs	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000eba:	f000 f821 	bl	8000f00 <HAL_RCC_GetSysClockFreq>
 8000ebe:	0001      	movs	r1, r0
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_RCC_ClockConfig+0x1bc>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	4013      	ands	r3, r2
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	000a      	movs	r2, r1
 8000ed0:	40da      	lsrs	r2, r3
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_RCC_ClockConfig+0x1cc>)
 8000ed4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f003 f980 	bl	80041dc <HAL_InitTick>
  
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b004      	add	sp, #16
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	40022000 	.word	0x40022000
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	00001388 	.word	0x00001388
 8000ef4:	fffff8ff 	.word	0xfffff8ff
 8000ef8:	080044e4 	.word	0x080044e4
 8000efc:	2000000c 	.word	0x2000000c

08000f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08f      	sub	sp, #60	; 0x3c
 8000f04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f06:	2314      	movs	r3, #20
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f0e:	c313      	stmia	r3!, {r0, r1, r4}
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f1a:	c313      	stmia	r3!, {r0, r1, r4}
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d002      	beq.n	8000f4a <HAL_RCC_GetSysClockFreq+0x4a>
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d003      	beq.n	8000f50 <HAL_RCC_GetSysClockFreq+0x50>
 8000f48:	e02d      	b.n	8000fa6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f4e:	e02d      	b.n	8000fac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f52:	0c9b      	lsrs	r3, r3, #18
 8000f54:	220f      	movs	r2, #15
 8000f56:	4013      	ands	r3, r2
 8000f58:	2214      	movs	r2, #20
 8000f5a:	18ba      	adds	r2, r7, r2
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	220f      	movs	r2, #15
 8000f66:	4013      	ands	r3, r2
 8000f68:	1d3a      	adds	r2, r7, #4
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	4013      	ands	r3, r2
 8000f76:	d009      	beq.n	8000f8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f7a:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f7c:	f7ff f8c4 	bl	8000108 <__udivsi3>
 8000f80:	0003      	movs	r3, r0
 8000f82:	001a      	movs	r2, r3
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	4353      	muls	r3, r2
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
 8000f8a:	e009      	b.n	8000fa0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f8e:	000a      	movs	r2, r1
 8000f90:	0152      	lsls	r2, r2, #5
 8000f92:	1a52      	subs	r2, r2, r1
 8000f94:	0193      	lsls	r3, r2, #6
 8000f96:	1a9b      	subs	r3, r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	185b      	adds	r3, r3, r1
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000fa4:	e002      	b.n	8000fac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000faa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000fae:	0018      	movs	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b00f      	add	sp, #60	; 0x3c
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	08004420 	.word	0x08004420
 8000fbc:	08004430 	.word	0x08004430
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	007a1200 	.word	0x007a1200

08000fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000fe0:	f7ff fff2 	bl	8000fc8 <HAL_RCC_GetHCLKFreq>
 8000fe4:	0001      	movs	r1, r0
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	2207      	movs	r2, #7
 8000fee:	4013      	ands	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000ff2:	5cd3      	ldrb	r3, [r2, r3]
 8000ff4:	40d9      	lsrs	r1, r3
 8000ff6:	000b      	movs	r3, r1
}    
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	40021000 	.word	0x40021000
 8001004:	080044f4 	.word	0x080044f4

08001008 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_RCC_GetClockConfig+0x4c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2203      	movs	r2, #3
 800101e:	401a      	ands	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_RCC_GetClockConfig+0x4c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	22f0      	movs	r2, #240	; 0xf0
 800102a:	401a      	ands	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_RCC_GetClockConfig+0x4c>)
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	23e0      	movs	r3, #224	; 0xe0
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	401a      	ands	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_RCC_GetClockConfig+0x50>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2201      	movs	r2, #1
 8001044:	401a      	ands	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	40021000 	.word	0x40021000
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e01e      	b.n	80010ac <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	223d      	movs	r2, #61	; 0x3d
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d107      	bne.n	800108a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	223c      	movs	r2, #60	; 0x3c
 800107e:	2100      	movs	r1, #0
 8001080:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f000 f815 	bl	80010b4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	223d      	movs	r2, #61	; 0x3d
 800108e:	2102      	movs	r1, #2
 8001090:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3304      	adds	r3, #4
 800109a:	0019      	movs	r1, r3
 800109c:	0010      	movs	r0, r2
 800109e:	f000 f961 	bl	8001364 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	223d      	movs	r2, #61	; 0x3d
 80010a6:	2101      	movs	r1, #1
 80010a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2202      	movs	r2, #2
 8001106:	4013      	ands	r3, r2
 8001108:	2b02      	cmp	r3, #2
 800110a:	d124      	bne.n	8001156 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	2b02      	cmp	r3, #2
 8001118:	d11d      	bne.n	8001156 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2203      	movs	r2, #3
 8001120:	4252      	negs	r2, r2
 8001122:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	d004      	beq.n	8001140 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0018      	movs	r0, r3
 800113a:	f000 f8fa 	bl	8001332 <HAL_TIM_IC_CaptureCallback>
 800113e:	e007      	b.n	8001150 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	0018      	movs	r0, r3
 8001144:	f000 f8ed 	bl	8001322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	0018      	movs	r0, r3
 800114c:	f000 f8f9 	bl	8001342 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	2204      	movs	r2, #4
 800115e:	4013      	ands	r3, r2
 8001160:	2b04      	cmp	r3, #4
 8001162:	d125      	bne.n	80011b0 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2204      	movs	r2, #4
 800116c:	4013      	ands	r3, r2
 800116e:	2b04      	cmp	r3, #4
 8001170:	d11e      	bne.n	80011b0 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2205      	movs	r2, #5
 8001178:	4252      	negs	r2, r2
 800117a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2202      	movs	r2, #2
 8001180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	23c0      	movs	r3, #192	; 0xc0
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d004      	beq.n	800119a <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	0018      	movs	r0, r3
 8001194:	f000 f8cd 	bl	8001332 <HAL_TIM_IC_CaptureCallback>
 8001198:	e007      	b.n	80011aa <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	0018      	movs	r0, r3
 800119e:	f000 f8c0 	bl	8001322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f000 f8cc 	bl	8001342 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2208      	movs	r2, #8
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d124      	bne.n	8001208 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2208      	movs	r2, #8
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d11d      	bne.n	8001208 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2209      	movs	r2, #9
 80011d2:	4252      	negs	r2, r2
 80011d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2204      	movs	r2, #4
 80011da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	2203      	movs	r2, #3
 80011e4:	4013      	ands	r3, r2
 80011e6:	d004      	beq.n	80011f2 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f8a1 	bl	8001332 <HAL_TIM_IC_CaptureCallback>
 80011f0:	e007      	b.n	8001202 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f894 	bl	8001322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 f8a0 	bl	8001342 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2210      	movs	r2, #16
 8001210:	4013      	ands	r3, r2
 8001212:	2b10      	cmp	r3, #16
 8001214:	d125      	bne.n	8001262 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2210      	movs	r2, #16
 800121e:	4013      	ands	r3, r2
 8001220:	2b10      	cmp	r3, #16
 8001222:	d11e      	bne.n	8001262 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2211      	movs	r2, #17
 800122a:	4252      	negs	r2, r2
 800122c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2208      	movs	r2, #8
 8001232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	23c0      	movs	r3, #192	; 0xc0
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4013      	ands	r3, r2
 8001240:	d004      	beq.n	800124c <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f000 f874 	bl	8001332 <HAL_TIM_IC_CaptureCallback>
 800124a:	e007      	b.n	800125c <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f867 	bl	8001322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	0018      	movs	r0, r3
 8001258:	f000 f873 	bl	8001342 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2201      	movs	r2, #1
 800126a:	4013      	ands	r3, r2
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10f      	bne.n	8001290 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	4013      	ands	r3, r2
 800127a:	2b01      	cmp	r3, #1
 800127c:	d108      	bne.n	8001290 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2202      	movs	r2, #2
 8001284:	4252      	negs	r2, r2
 8001286:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	0018      	movs	r0, r3
 800128c:	f002 ff18 	bl	80040c0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4013      	ands	r3, r2
 800129a:	2b80      	cmp	r3, #128	; 0x80
 800129c:	d10f      	bne.n	80012be <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b80      	cmp	r3, #128	; 0x80
 80012aa:	d108      	bne.n	80012be <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2281      	movs	r2, #129	; 0x81
 80012b2:	4252      	negs	r2, r2
 80012b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 f8d3 	bl	8001464 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b40      	cmp	r3, #64	; 0x40
 80012ca:	d10f      	bne.n	80012ec <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b40      	cmp	r3, #64	; 0x40
 80012d8:	d108      	bne.n	80012ec <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2241      	movs	r2, #65	; 0x41
 80012e0:	4252      	negs	r2, r2
 80012e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f833 	bl	8001352 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2220      	movs	r2, #32
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d10f      	bne.n	800131a <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2220      	movs	r2, #32
 8001302:	4013      	ands	r3, r2
 8001304:	2b20      	cmp	r3, #32
 8001306:	d108      	bne.n	800131a <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2221      	movs	r2, #33	; 0x21
 800130e:	4252      	negs	r2, r2
 8001310:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	0018      	movs	r0, r3
 8001316:	f000 f89d 	bl	8001454 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <TIM_Base_SetConfig+0xd4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d003      	beq.n	8001388 <TIM_Base_SetConfig+0x24>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a2e      	ldr	r2, [pc, #184]	; (800143c <TIM_Base_SetConfig+0xd8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d108      	bne.n	800139a <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2270      	movs	r2, #112	; 0x70
 800138c:	4393      	bics	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <TIM_Base_SetConfig+0xd4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <TIM_Base_SetConfig+0x66>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a25      	ldr	r2, [pc, #148]	; (800143c <TIM_Base_SetConfig+0xd8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00f      	beq.n	80013ca <TIM_Base_SetConfig+0x66>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a24      	ldr	r2, [pc, #144]	; (8001440 <TIM_Base_SetConfig+0xdc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00b      	beq.n	80013ca <TIM_Base_SetConfig+0x66>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a23      	ldr	r2, [pc, #140]	; (8001444 <TIM_Base_SetConfig+0xe0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <TIM_Base_SetConfig+0x66>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a22      	ldr	r2, [pc, #136]	; (8001448 <TIM_Base_SetConfig+0xe4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d003      	beq.n	80013ca <TIM_Base_SetConfig+0x66>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a21      	ldr	r2, [pc, #132]	; (800144c <TIM_Base_SetConfig+0xe8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d108      	bne.n	80013dc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a20      	ldr	r2, [pc, #128]	; (8001450 <TIM_Base_SetConfig+0xec>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	4393      	bics	r3, r2
 80013e2:	001a      	movs	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <TIM_Base_SetConfig+0xd4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00b      	beq.n	8001422 <TIM_Base_SetConfig+0xbe>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <TIM_Base_SetConfig+0xe0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d007      	beq.n	8001422 <TIM_Base_SetConfig+0xbe>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <TIM_Base_SetConfig+0xe4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d003      	beq.n	8001422 <TIM_Base_SetConfig+0xbe>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <TIM_Base_SetConfig+0xe8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d103      	bne.n	800142a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	615a      	str	r2, [r3, #20]
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40012c00 	.word	0x40012c00
 800143c:	40000400 	.word	0x40000400
 8001440:	40002000 	.word	0x40002000
 8001444:	40014000 	.word	0x40014000
 8001448:	40014400 	.word	0x40014400
 800144c:	40014800 	.word	0x40014800
 8001450:	fffffcff 	.word	0xfffffcff

08001454 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e047      	b.n	8001516 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2269      	movs	r2, #105	; 0x69
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d107      	bne.n	80014a2 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2268      	movs	r2, #104	; 0x68
 8001496:	2100      	movs	r1, #0
 8001498:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0018      	movs	r0, r3
 800149e:	f002 fe51 	bl	8004144 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2269      	movs	r2, #105	; 0x69
 80014a6:	2124      	movs	r1, #36	; 0x24
 80014a8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	438a      	bics	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	0018      	movs	r0, r3
 80014be:	f000 f831 	bl	8001524 <UART_SetConfig>
 80014c2:	0003      	movs	r3, r0
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e024      	b.n	8001516 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 f99a 	bl	8001810 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	490e      	ldr	r1, [pc, #56]	; (8001520 <HAL_UART_Init+0xac>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2108      	movs	r1, #8
 80014f8:	438a      	bics	r2, r1
 80014fa:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2101      	movs	r1, #1
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	0018      	movs	r0, r3
 8001510:	f000 fa32 	bl	8001978 <UART_CheckIdleState>
 8001514:	0003      	movs	r3, r0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	fffff7ff 	.word	0xfffff7ff

08001524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001530:	2317      	movs	r3, #23
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2210      	movs	r2, #16
 8001536:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001538:	230a      	movs	r3, #10
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	2200      	movs	r2, #0
 800153e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001540:	2314      	movs	r3, #20
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	2200      	movs	r2, #0
 8001546:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001548:	2313      	movs	r3, #19
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	4313      	orrs	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4aa0      	ldr	r2, [pc, #640]	; (80017f0 <UART_SetConfig+0x2cc>)
 8001570:	4013      	ands	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a9b      	ldr	r2, [pc, #620]	; (80017f4 <UART_SetConfig+0x2d0>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a93      	ldr	r2, [pc, #588]	; (80017f8 <UART_SetConfig+0x2d4>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a8f      	ldr	r2, [pc, #572]	; (80017fc <UART_SetConfig+0x2d8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d125      	bne.n	800160e <UART_SetConfig+0xea>
 80015c2:	4b8f      	ldr	r3, [pc, #572]	; (8001800 <UART_SetConfig+0x2dc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	2203      	movs	r2, #3
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d00f      	beq.n	80015ee <UART_SetConfig+0xca>
 80015ce:	d304      	bcc.n	80015da <UART_SetConfig+0xb6>
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d011      	beq.n	80015f8 <UART_SetConfig+0xd4>
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d005      	beq.n	80015e4 <UART_SetConfig+0xc0>
 80015d8:	e013      	b.n	8001602 <UART_SetConfig+0xde>
 80015da:	2317      	movs	r3, #23
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e022      	b.n	800162a <UART_SetConfig+0x106>
 80015e4:	2317      	movs	r3, #23
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2202      	movs	r2, #2
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e01d      	b.n	800162a <UART_SetConfig+0x106>
 80015ee:	2317      	movs	r3, #23
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2204      	movs	r2, #4
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	e018      	b.n	800162a <UART_SetConfig+0x106>
 80015f8:	2317      	movs	r3, #23
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	2208      	movs	r2, #8
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e013      	b.n	800162a <UART_SetConfig+0x106>
 8001602:	2317      	movs	r3, #23
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	2210      	movs	r2, #16
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	e00d      	b.n	800162a <UART_SetConfig+0x106>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7c      	ldr	r2, [pc, #496]	; (8001804 <UART_SetConfig+0x2e0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d104      	bne.n	8001622 <UART_SetConfig+0xfe>
 8001618:	2317      	movs	r3, #23
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	e003      	b.n	800162a <UART_SetConfig+0x106>
 8001622:	2317      	movs	r3, #23
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2210      	movs	r2, #16
 8001628:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	429a      	cmp	r2, r3
 8001634:	d000      	beq.n	8001638 <UART_SetConfig+0x114>
 8001636:	e077      	b.n	8001728 <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8001638:	2317      	movs	r3, #23
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d01c      	beq.n	800167c <UART_SetConfig+0x158>
 8001642:	dc02      	bgt.n	800164a <UART_SetConfig+0x126>
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <UART_SetConfig+0x130>
 8001648:	e04f      	b.n	80016ea <UART_SetConfig+0x1c6>
 800164a:	2b04      	cmp	r3, #4
 800164c:	d027      	beq.n	800169e <UART_SetConfig+0x17a>
 800164e:	2b08      	cmp	r3, #8
 8001650:	d039      	beq.n	80016c6 <UART_SetConfig+0x1a2>
 8001652:	e04a      	b.n	80016ea <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001654:	f7ff fcc2 	bl	8000fdc <HAL_RCC_GetPCLK1Freq>
 8001658:	0003      	movs	r3, r0
 800165a:	005a      	lsls	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	18d2      	adds	r2, r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0019      	movs	r1, r3
 800166a:	0010      	movs	r0, r2
 800166c:	f7fe fd4c 	bl	8000108 <__udivsi3>
 8001670:	0003      	movs	r3, r0
 8001672:	001a      	movs	r2, r3
 8001674:	2314      	movs	r3, #20
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	801a      	strh	r2, [r3, #0]
        break;
 800167a:	e03b      	b.n	80016f4 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	4a61      	ldr	r2, [pc, #388]	; (8001808 <UART_SetConfig+0x2e4>)
 8001684:	189a      	adds	r2, r3, r2
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	0019      	movs	r1, r3
 800168c:	0010      	movs	r0, r2
 800168e:	f7fe fd3b 	bl	8000108 <__udivsi3>
 8001692:	0003      	movs	r3, r0
 8001694:	001a      	movs	r2, r3
 8001696:	2314      	movs	r3, #20
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	801a      	strh	r2, [r3, #0]
        break;
 800169c:	e02a      	b.n	80016f4 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800169e:	f7ff fc2f 	bl	8000f00 <HAL_RCC_GetSysClockFreq>
 80016a2:	0003      	movs	r3, r0
 80016a4:	005a      	lsls	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	085b      	lsrs	r3, r3, #1
 80016ac:	18d2      	adds	r2, r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	0019      	movs	r1, r3
 80016b4:	0010      	movs	r0, r2
 80016b6:	f7fe fd27 	bl	8000108 <__udivsi3>
 80016ba:	0003      	movs	r3, r0
 80016bc:	001a      	movs	r2, r3
 80016be:	2314      	movs	r3, #20
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	801a      	strh	r2, [r3, #0]
        break;
 80016c4:	e016      	b.n	80016f4 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	0252      	lsls	r2, r2, #9
 80016d0:	189a      	adds	r2, r3, r2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0019      	movs	r1, r3
 80016d8:	0010      	movs	r0, r2
 80016da:	f7fe fd15 	bl	8000108 <__udivsi3>
 80016de:	0003      	movs	r3, r0
 80016e0:	001a      	movs	r2, r3
 80016e2:	2314      	movs	r3, #20
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	801a      	strh	r2, [r3, #0]
        break;
 80016e8:	e004      	b.n	80016f4 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80016ea:	2313      	movs	r3, #19
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
        break;
 80016f2:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80016f4:	200a      	movs	r0, #10
 80016f6:	183b      	adds	r3, r7, r0
 80016f8:	2414      	movs	r4, #20
 80016fa:	193a      	adds	r2, r7, r4
 80016fc:	8812      	ldrh	r2, [r2, #0]
 80016fe:	210f      	movs	r1, #15
 8001700:	438a      	bics	r2, r1
 8001702:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001704:	193b      	adds	r3, r7, r4
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	105b      	asrs	r3, r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	2207      	movs	r2, #7
 800170e:	4013      	ands	r3, r2
 8001710:	b299      	uxth	r1, r3
 8001712:	183b      	adds	r3, r7, r0
 8001714:	183a      	adds	r2, r7, r0
 8001716:	8812      	ldrh	r2, [r2, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	183a      	adds	r2, r7, r0
 8001722:	8812      	ldrh	r2, [r2, #0]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	e05b      	b.n	80017e0 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 8001728:	2317      	movs	r3, #23
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d01b      	beq.n	800176a <UART_SetConfig+0x246>
 8001732:	dc02      	bgt.n	800173a <UART_SetConfig+0x216>
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <UART_SetConfig+0x220>
 8001738:	e04d      	b.n	80017d6 <UART_SetConfig+0x2b2>
 800173a:	2b04      	cmp	r3, #4
 800173c:	d026      	beq.n	800178c <UART_SetConfig+0x268>
 800173e:	2b08      	cmp	r3, #8
 8001740:	d037      	beq.n	80017b2 <UART_SetConfig+0x28e>
 8001742:	e048      	b.n	80017d6 <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001744:	f7ff fc4a 	bl	8000fdc <HAL_RCC_GetPCLK1Freq>
 8001748:	0002      	movs	r2, r0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	18d2      	adds	r2, r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	0019      	movs	r1, r3
 8001758:	0010      	movs	r0, r2
 800175a:	f7fe fcd5 	bl	8000108 <__udivsi3>
 800175e:	0003      	movs	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60da      	str	r2, [r3, #12]
        break;
 8001768:	e03a      	b.n	80017e0 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	4a26      	ldr	r2, [pc, #152]	; (800180c <UART_SetConfig+0x2e8>)
 8001772:	189a      	adds	r2, r3, r2
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0019      	movs	r1, r3
 800177a:	0010      	movs	r0, r2
 800177c:	f7fe fcc4 	bl	8000108 <__udivsi3>
 8001780:	0003      	movs	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60da      	str	r2, [r3, #12]
        break;
 800178a:	e029      	b.n	80017e0 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800178c:	f7ff fbb8 	bl	8000f00 <HAL_RCC_GetSysClockFreq>
 8001790:	0002      	movs	r2, r0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	18d2      	adds	r2, r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	0019      	movs	r1, r3
 80017a0:	0010      	movs	r0, r2
 80017a2:	f7fe fcb1 	bl	8000108 <__udivsi3>
 80017a6:	0003      	movs	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60da      	str	r2, [r3, #12]
        break;
 80017b0:	e016      	b.n	80017e0 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	0212      	lsls	r2, r2, #8
 80017bc:	189a      	adds	r2, r3, r2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0019      	movs	r1, r3
 80017c4:	0010      	movs	r0, r2
 80017c6:	f7fe fc9f 	bl	8000108 <__udivsi3>
 80017ca:	0003      	movs	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60da      	str	r2, [r3, #12]
        break;
 80017d4:	e004      	b.n	80017e0 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80017d6:	2313      	movs	r3, #19
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
        break;
 80017de:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80017e0:	2313      	movs	r3, #19
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	781b      	ldrb	r3, [r3, #0]

}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b007      	add	sp, #28
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	ffff69f3 	.word	0xffff69f3
 80017f4:	ffffcfff 	.word	0xffffcfff
 80017f8:	fffff4ff 	.word	0xfffff4ff
 80017fc:	40013800 	.word	0x40013800
 8001800:	40021000 	.word	0x40021000
 8001804:	40004400 	.word	0x40004400
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	d00b      	beq.n	800183a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <UART_AdvFeatureConfig+0x144>)
 800182a:	4013      	ands	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d00b      	beq.n	800185c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4a43      	ldr	r2, [pc, #268]	; (8001958 <UART_AdvFeatureConfig+0x148>)
 800184c:	4013      	ands	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	2204      	movs	r2, #4
 8001862:	4013      	ands	r3, r2
 8001864:	d00b      	beq.n	800187e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a3b      	ldr	r2, [pc, #236]	; (800195c <UART_AdvFeatureConfig+0x14c>)
 800186e:	4013      	ands	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	2208      	movs	r2, #8
 8001884:	4013      	ands	r3, r2
 8001886:	d00b      	beq.n	80018a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a34      	ldr	r2, [pc, #208]	; (8001960 <UART_AdvFeatureConfig+0x150>)
 8001890:	4013      	ands	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	2210      	movs	r2, #16
 80018a6:	4013      	ands	r3, r2
 80018a8:	d00b      	beq.n	80018c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a2c      	ldr	r2, [pc, #176]	; (8001964 <UART_AdvFeatureConfig+0x154>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	2220      	movs	r2, #32
 80018c8:	4013      	ands	r3, r2
 80018ca:	d00b      	beq.n	80018e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4a25      	ldr	r2, [pc, #148]	; (8001968 <UART_AdvFeatureConfig+0x158>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	2240      	movs	r2, #64	; 0x40
 80018ea:	4013      	ands	r3, r2
 80018ec:	d01d      	beq.n	800192a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <UART_AdvFeatureConfig+0x15c>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	035b      	lsls	r3, r3, #13
 800190e:	429a      	cmp	r2, r3
 8001910:	d10b      	bne.n	800192a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <UART_AdvFeatureConfig+0x160>)
 800191a:	4013      	ands	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	4013      	ands	r3, r2
 8001932:	d00b      	beq.n	800194c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <UART_AdvFeatureConfig+0x164>)
 800193c:	4013      	ands	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
  }
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}
 8001954:	fffdffff 	.word	0xfffdffff
 8001958:	fffeffff 	.word	0xfffeffff
 800195c:	fffbffff 	.word	0xfffbffff
 8001960:	ffff7fff 	.word	0xffff7fff
 8001964:	ffffefff 	.word	0xffffefff
 8001968:	ffffdfff 	.word	0xffffdfff
 800196c:	ffefffff 	.word	0xffefffff
 8001970:	ff9fffff 	.word	0xff9fffff
 8001974:	fff7ffff 	.word	0xfff7ffff

08001978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2269      	movs	r2, #105	; 0x69
 800198a:	2120      	movs	r1, #32
 800198c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	226a      	movs	r2, #106	; 0x6a
 8001992:	2120      	movs	r1, #32
 8001994:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2268      	movs	r2, #104	; 0x68
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	0002      	movs	r2, r0
 80019b0:	1dbb      	adds	r3, r7, #6
 80019b2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019b8:	1dbb      	adds	r3, r7, #6
 80019ba:	2200      	movs	r2, #0
 80019bc:	5e9b      	ldrsh	r3, [r3, r2]
 80019be:	2b84      	cmp	r3, #132	; 0x84
 80019c0:	d006      	beq.n	80019d0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80019c2:	1dbb      	adds	r3, r7, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	5e9a      	ldrsh	r2, [r3, r2]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	18d3      	adds	r3, r2, r3
 80019cc:	3303      	adds	r3, #3
 80019ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019d0:	68fb      	ldr	r3, [r7, #12]
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b004      	add	sp, #16
 80019d8:	bd80      	pop	{r7, pc}

080019da <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019e0:	f3ef 8305 	mrs	r3, IPSR
 80019e4:	607b      	str	r3, [r7, #4]
  return(result);
 80019e6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	4193      	sbcs	r3, r2
 80019ec:	b2db      	uxtb	r3, r3
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019fa:	f000 fed1 	bl	80027a0 <vTaskStartScheduler>
  
  return osOK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af02      	add	r7, sp, #8
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685c      	ldr	r4, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a1c:	b29e      	uxth	r6, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2208      	movs	r2, #8
 8001a22:	5e9b      	ldrsh	r3, [r3, r2]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff ffbf 	bl	80019a8 <makeFreeRtosPriority>
 8001a2a:	0001      	movs	r1, r0
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	230c      	movs	r3, #12
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	0013      	movs	r3, r2
 8001a38:	0032      	movs	r2, r6
 8001a3a:	0029      	movs	r1, r5
 8001a3c:	0020      	movs	r0, r4
 8001a3e:	f000 fd62 	bl	8002506 <xTaskCreate>
 8001a42:	0003      	movs	r3, r0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d001      	beq.n	8001a4c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e000      	b.n	8001a4e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b005      	add	sp, #20
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <osDelay+0x16>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	e000      	b.n	8001a6e <osDelay+0x18>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fe70 	bl	8002754 <vTaskDelay>
  
  return osOK;
 8001a74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a76:	0018      	movs	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b004      	add	sp, #16
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	200b      	movs	r0, #11
 8001a8c:	183b      	adds	r3, r7, r0
 8001a8e:	1c0a      	adds	r2, r1, #0
 8001a90:	701a      	strb	r2, [r3, #0]
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <osTimerCreate+0x1e>
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	e000      	b.n	8001aa0 <osTimerCreate+0x20>
 8001a9e:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
  return xTimerCreate((const char *)"",
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <osTimerCreate+0x3c>)
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	000b      	movs	r3, r1
 8001aac:	2101      	movs	r1, #1
 8001aae:	f001 fb9b 	bl	80031e8 <xTimerCreate>
 8001ab2:	0003      	movs	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b004      	add	sp, #16
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08004440 	.word	0x08004440

08001ac0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <osTimerStart+0x20>
    ticks = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8001ae0:	f7ff ff7b 	bl	80019da <inHandlerMode>
 8001ae4:	1e03      	subs	r3, r0, #0
 8001ae6:	d017      	beq.n	8001b18 <osTimerStart+0x58>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8001ae8:	230c      	movs	r3, #12
 8001aea:	18f9      	adds	r1, r7, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	000b      	movs	r3, r1
 8001af6:	2109      	movs	r1, #9
 8001af8:	f001 fbbe 	bl	8003278 <xTimerGenericCommand>
 8001afc:	0003      	movs	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d002      	beq.n	8001b08 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8001b02:	23ff      	movs	r3, #255	; 0xff
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e014      	b.n	8001b32 <osTimerStart+0x72>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d011      	beq.n	8001b32 <osTimerStart+0x72>
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <osTimerStart+0x7c>)
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0552      	lsls	r2, r2, #21
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e00c      	b.n	8001b32 <osTimerStart+0x72>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2300      	movs	r3, #0
 8001b22:	2104      	movs	r1, #4
 8001b24:	f001 fba8 	bl	8003278 <xTimerGenericCommand>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <osTimerStart+0x72>
      result = osErrorOS;
 8001b2e:	23ff      	movs	r3, #255	; 0xff
 8001b30:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8001b32:	697b      	ldr	r3, [r7, #20]
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b006      	add	sp, #24
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	e000ed04 	.word	0xe000ed04

08001b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4252      	negs	r2, r2
 8001b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3308      	adds	r3, #8
 8001b5e:	001a      	movs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3308      	adds	r3, #8
 8001b68:	001a      	movs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3301      	adds	r3, #1
 8001bea:	d103      	bne.n	8001bf4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e00c      	b.n	8001c0e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3308      	adds	r3, #8
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e002      	b.n	8001c02 <vListInsert+0x2c>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d2f6      	bcs.n	8001bfc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6892      	ldr	r2, [r2, #8]
 8001c58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6852      	ldr	r2, [r2, #4]
 8001c62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d103      	bne.n	8001c76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <xQueueGenericReset+0x18>
 8001ca6:	b672      	cpsid	i
 8001ca8:	e7fe      	b.n	8001ca8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8001caa:	f001 fde7 	bl	800387c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	434b      	muls	r3, r1
 8001cbc:	18d2      	adds	r2, r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	1e59      	subs	r1, r3, #1
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	434b      	muls	r3, r1
 8001ce0:	18d2      	adds	r2, r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2244      	movs	r2, #68	; 0x44
 8001cea:	21ff      	movs	r1, #255	; 0xff
 8001cec:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2245      	movs	r2, #69	; 0x45
 8001cf2:	21ff      	movs	r1, #255	; 0xff
 8001cf4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3310      	adds	r3, #16
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 ff75 	bl	8002bf8 <xTaskRemoveFromEventList>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d00c      	beq.n	8001d2c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d12:	f001 fda3 	bl	800385c <vPortYield>
 8001d16:	e009      	b.n	8001d2c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3310      	adds	r3, #16
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff ff0f 	bl	8001b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3324      	adds	r3, #36	; 0x24
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff ff0a 	bl	8001b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d2c:	f001 fdb8 	bl	80038a0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001d3a:	b590      	push	{r4, r7, lr}
 8001d3c:	b08b      	sub	sp, #44	; 0x2c
 8001d3e:	af02      	add	r7, sp, #8
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <xQueueGenericCreate+0x18>
 8001d4e:	b672      	cpsid	i
 8001d50:	e7fe      	b.n	8001d50 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	e003      	b.n	8001d66 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	4353      	muls	r3, r2
 8001d64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3348      	adds	r3, #72	; 0x48
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f001 fe18 	bl	80039a0 <pvPortMalloc>
 8001d70:	0003      	movs	r3, r0
 8001d72:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00c      	beq.n	8001d94 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3348      	adds	r3, #72	; 0x48
 8001d7e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d80:	1dfb      	adds	r3, r7, #7
 8001d82:	781c      	ldrb	r4, [r3, #0]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	0023      	movs	r3, r4
 8001d90:	f000 f805 	bl	8001d9e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8001d94:	69bb      	ldr	r3, [r7, #24]
	}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b009      	add	sp, #36	; 0x24
 8001d9c:	bd90      	pop	{r4, r7, pc}

08001d9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	001a      	movs	r2, r3
 8001dac:	1cfb      	adds	r3, r7, #3
 8001dae:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e002      	b.n	8001dc4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff ff5c 	bl	8001c92 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b08a      	sub	sp, #40	; 0x28
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <xQueueGenericSend+0x20>
 8001dfe:	b672      	cpsid	i
 8001e00:	e7fe      	b.n	8001e00 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d103      	bne.n	8001e10 <xQueueGenericSend+0x2e>
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <xQueueGenericSend+0x32>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <xQueueGenericSend+0x34>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <xQueueGenericSend+0x3c>
 8001e1a:	b672      	cpsid	i
 8001e1c:	e7fe      	b.n	8001e1c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d103      	bne.n	8001e2c <xQueueGenericSend+0x4a>
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <xQueueGenericSend+0x4e>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <xQueueGenericSend+0x50>
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <xQueueGenericSend+0x58>
 8001e36:	b672      	cpsid	i
 8001e38:	e7fe      	b.n	8001e38 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e3a:	f001 f86f 	bl	8002f1c <xTaskGetSchedulerState>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d102      	bne.n	8001e48 <xQueueGenericSend+0x66>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <xQueueGenericSend+0x6a>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <xQueueGenericSend+0x6c>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <xQueueGenericSend+0x74>
 8001e52:	b672      	cpsid	i
 8001e54:	e7fe      	b.n	8001e54 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e56:	f001 fd11 	bl	800387c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d302      	bcc.n	8001e6c <xQueueGenericSend+0x8a>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d11e      	bne.n	8001eaa <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 f9ce 	bl	8002214 <prvCopyDataToQueue>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	3324      	adds	r3, #36	; 0x24
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 feb5 	bl	8002bf8 <xTaskRemoveFromEventList>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d007      	beq.n	8001ea2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e92:	f001 fce3 	bl	800385c <vPortYield>
 8001e96:	e004      	b.n	8001ea2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e9e:	f001 fcdd 	bl	800385c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ea2:	f001 fcfd 	bl	80038a0 <vPortExitCritical>
				return pdPASS;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e05b      	b.n	8001f62 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001eb0:	f001 fcf6 	bl	80038a0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e054      	b.n	8001f62 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001ebe:	2314      	movs	r3, #20
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fef4 	bl	8002cb0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ecc:	f001 fce8 	bl	80038a0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ed0:	f000 fca2 	bl	8002818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ed4:	f001 fcd2 	bl	800387c <vPortEnterCritical>
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	2244      	movs	r2, #68	; 0x44
 8001edc:	5c9b      	ldrb	r3, [r3, r2]
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	d103      	bne.n	8001eec <xQueueGenericSend+0x10a>
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	2244      	movs	r2, #68	; 0x44
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5499      	strb	r1, [r3, r2]
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2245      	movs	r2, #69	; 0x45
 8001ef0:	5c9b      	ldrb	r3, [r3, r2]
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	d103      	bne.n	8001f00 <xQueueGenericSend+0x11e>
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	2245      	movs	r2, #69	; 0x45
 8001efc:	2100      	movs	r1, #0
 8001efe:	5499      	strb	r1, [r3, r2]
 8001f00:	f001 fcce 	bl	80038a0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f04:	1d3a      	adds	r2, r7, #4
 8001f06:	2314      	movs	r3, #20
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 fee9 	bl	8002ce4 <xTaskCheckForTimeOut>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d11e      	bne.n	8001f54 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 fa80 	bl	800241e <prvIsQueueFull>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d011      	beq.n	8001f46 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	3310      	adds	r3, #16
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	0011      	movs	r1, r2
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fe20 	bl	8002b70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f9ff 	bl	8002336 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f38:	f000 fc7a 	bl	8002830 <xTaskResumeAll>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d18a      	bne.n	8001e56 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8001f40:	f001 fc8c 	bl	800385c <vPortYield>
 8001f44:	e787      	b.n	8001e56 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 f9f4 	bl	8002336 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f4e:	f000 fc6f 	bl	8002830 <xTaskResumeAll>
 8001f52:	e780      	b.n	8001e56 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f9ed 	bl	8002336 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f5c:	f000 fc68 	bl	8002830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f60:	2300      	movs	r3, #0
		}
	}
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b00a      	add	sp, #40	; 0x28
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f6a:	b590      	push	{r4, r7, lr}
 8001f6c:	b089      	sub	sp, #36	; 0x24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <xQueueGenericSendFromISR+0x1c>
 8001f82:	b672      	cpsid	i
 8001f84:	e7fe      	b.n	8001f84 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <xQueueGenericSendFromISR+0x2a>
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <xQueueGenericSendFromISR+0x2e>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <xQueueGenericSendFromISR+0x30>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <xQueueGenericSendFromISR+0x38>
 8001f9e:	b672      	cpsid	i
 8001fa0:	e7fe      	b.n	8001fa0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d103      	bne.n	8001fb0 <xQueueGenericSendFromISR+0x46>
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <xQueueGenericSendFromISR+0x4a>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <xQueueGenericSendFromISR+0x4c>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <xQueueGenericSendFromISR+0x54>
 8001fba:	b672      	cpsid	i
 8001fbc:	e7fe      	b.n	8001fbc <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fbe:	f001 fc87 	bl	80038d0 <ulSetInterruptMaskFromISR>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d302      	bcc.n	8001fd8 <xQueueGenericSendFromISR+0x6e>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d12e      	bne.n	8002036 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001fd8:	2413      	movs	r4, #19
 8001fda:	193b      	adds	r3, r7, r4
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	2145      	movs	r1, #69	; 0x45
 8001fe0:	5c52      	ldrb	r2, [r2, r1]
 8001fe2:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 f912 	bl	8002214 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ff0:	193b      	adds	r3, r7, r4
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	d111      	bne.n	800201e <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	3324      	adds	r3, #36	; 0x24
 8002006:	0018      	movs	r0, r3
 8002008:	f000 fdf6 	bl	8002bf8 <xTaskRemoveFromEventList>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d00f      	beq.n	8002030 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e008      	b.n	8002030 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800201e:	2313      	movs	r3, #19
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	b259      	sxtb	r1, r3
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2245      	movs	r2, #69	; 0x45
 800202e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002030:	2301      	movs	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
		{
 8002034:	e001      	b.n	800203a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	0018      	movs	r0, r3
 800203e:	f001 fc4d 	bl	80038dc <vClearInterruptMaskFromISR>

	return xReturn;
 8002042:	69fb      	ldr	r3, [r7, #28]
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b009      	add	sp, #36	; 0x24
 800204a:	bd90      	pop	{r4, r7, pc}

0800204c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <xQueueGenericReceive+0x20>
 8002068:	b672      	cpsid	i
 800206a:	e7fe      	b.n	800206a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <xQueueGenericReceive+0x2e>
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <xQueueGenericReceive+0x32>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <xQueueGenericReceive+0x34>
 800207e:	2300      	movs	r3, #0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <xQueueGenericReceive+0x3c>
 8002084:	b672      	cpsid	i
 8002086:	e7fe      	b.n	8002086 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002088:	f000 ff48 	bl	8002f1c <xTaskGetSchedulerState>
 800208c:	1e03      	subs	r3, r0, #0
 800208e:	d102      	bne.n	8002096 <xQueueGenericReceive+0x4a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <xQueueGenericReceive+0x4e>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <xQueueGenericReceive+0x50>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <xQueueGenericReceive+0x58>
 80020a0:	b672      	cpsid	i
 80020a2:	e7fe      	b.n	80020a2 <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80020a4:	f001 fbea 	bl	800387c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d03a      	beq.n	800212a <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 f912 	bl	80022ea <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11a      	bne.n	8002102 <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	1e5a      	subs	r2, r3, #1
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80020dc:	f000 fff4 	bl	80030c8 <pvTaskIncrementMutexHeldCount>
 80020e0:	0002      	movs	r2, r0
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d019      	beq.n	8002122 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	3310      	adds	r3, #16
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 fd80 	bl	8002bf8 <xTaskRemoveFromEventList>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d012      	beq.n	8002122 <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80020fc:	f001 fbae 	bl	800385c <vPortYield>
 8002100:	e00f      	b.n	8002122 <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	3324      	adds	r3, #36	; 0x24
 8002114:	0018      	movs	r0, r3
 8002116:	f000 fd6f 	bl	8002bf8 <xTaskRemoveFromEventList>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800211e:	f001 fb9d 	bl	800385c <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002122:	f001 fbbd 	bl	80038a0 <vPortExitCritical>
				return pdPASS;
 8002126:	2301      	movs	r3, #1
 8002128:	e070      	b.n	800220c <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002130:	f001 fbb6 	bl	80038a0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002134:	2300      	movs	r3, #0
 8002136:	e069      	b.n	800220c <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800213e:	2310      	movs	r3, #16
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	0018      	movs	r0, r3
 8002144:	f000 fdb4 	bl	8002cb0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002148:	2301      	movs	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800214c:	f001 fba8 	bl	80038a0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002150:	f000 fb62 	bl	8002818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002154:	f001 fb92 	bl	800387c <vPortEnterCritical>
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	2244      	movs	r2, #68	; 0x44
 800215c:	5c9b      	ldrb	r3, [r3, r2]
 800215e:	b25b      	sxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	d103      	bne.n	800216c <xQueueGenericReceive+0x120>
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	2244      	movs	r2, #68	; 0x44
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2245      	movs	r2, #69	; 0x45
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	b25b      	sxtb	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	d103      	bne.n	8002180 <xQueueGenericReceive+0x134>
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	2245      	movs	r2, #69	; 0x45
 800217c:	2100      	movs	r1, #0
 800217e:	5499      	strb	r1, [r3, r2]
 8002180:	f001 fb8e 	bl	80038a0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002184:	1d3a      	adds	r2, r7, #4
 8002186:	2310      	movs	r3, #16
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	0011      	movs	r1, r2
 800218c:	0018      	movs	r0, r3
 800218e:	f000 fda9 	bl	8002ce4 <xTaskCheckForTimeOut>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d12c      	bne.n	80021f0 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f92a 	bl	80023f2 <prvIsQueueEmpty>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d01f      	beq.n	80021e2 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d108      	bne.n	80021bc <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 80021aa:	f001 fb67 	bl	800387c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 fece 	bl	8002f54 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80021b8:	f001 fb72 	bl	80038a0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	3324      	adds	r3, #36	; 0x24
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	0011      	movs	r1, r2
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 fcd3 	bl	8002b70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f8b2 	bl	8002336 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021d2:	f000 fb2d 	bl	8002830 <xTaskResumeAll>
 80021d6:	1e03      	subs	r3, r0, #0
 80021d8:	d000      	beq.n	80021dc <xQueueGenericReceive+0x190>
 80021da:	e763      	b.n	80020a4 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 80021dc:	f001 fb3e 	bl	800385c <vPortYield>
 80021e0:	e760      	b.n	80020a4 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f8a6 	bl	8002336 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021ea:	f000 fb21 	bl	8002830 <xTaskResumeAll>
 80021ee:	e759      	b.n	80020a4 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 f89f 	bl	8002336 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021f8:	f000 fb1a 	bl	8002830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 f8f7 	bl	80023f2 <prvIsQueueEmpty>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d100      	bne.n	800220a <xQueueGenericReceive+0x1be>
 8002208:	e74c      	b.n	80020a4 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800220a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b00a      	add	sp, #40	; 0x28
 8002212:	bd80      	pop	{r7, pc}

08002214 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10e      	bne.n	8002250 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d14e      	bne.n	80022d8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fee6 	bl	8003010 <xTaskPriorityDisinherit>
 8002244:	0003      	movs	r3, r0
 8002246:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e043      	b.n	80022d8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d119      	bne.n	800228a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6898      	ldr	r0, [r3, #8]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0019      	movs	r1, r3
 8002262:	f002 f8bf 	bl	80043e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	18d2      	adds	r2, r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d32b      	bcc.n	80022d8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	e026      	b.n	80022d8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68d8      	ldr	r0, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	0019      	movs	r1, r3
 8002296:	f002 f8a5 	bl	80043e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	425b      	negs	r3, r3
 80022a4:	18d2      	adds	r2, r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d207      	bcs.n	80022c6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	425b      	negs	r3, r3
 80022c0:	18d2      	adds	r2, r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d105      	bne.n	80022d8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80022e0:	697b      	ldr	r3, [r7, #20]
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b006      	add	sp, #24
 80022e8:	bd80      	pop	{r7, pc}

080022ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d018      	beq.n	800232e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	18d2      	adds	r2, r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d303      	bcc.n	800231e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68d9      	ldr	r1, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	0018      	movs	r0, r3
 800232a:	f002 f85b 	bl	80043e4 <memcpy>
	}
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}

08002336 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800233e:	f001 fa9d 	bl	800387c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002342:	230f      	movs	r3, #15
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	2145      	movs	r1, #69	; 0x45
 800234a:	5c52      	ldrb	r2, [r2, r1]
 800234c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800234e:	e013      	b.n	8002378 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	2b00      	cmp	r3, #0
 8002356:	d016      	beq.n	8002386 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3324      	adds	r3, #36	; 0x24
 800235c:	0018      	movs	r0, r3
 800235e:	f000 fc4b 	bl	8002bf8 <xTaskRemoveFromEventList>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002366:	f000 fd0b 	bl	8002d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800236a:	210f      	movs	r1, #15
 800236c:	187b      	adds	r3, r7, r1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	187b      	adds	r3, r7, r1
 8002376:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002378:	230f      	movs	r3, #15
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b25b      	sxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	dce5      	bgt.n	8002350 <prvUnlockQueue+0x1a>
 8002384:	e000      	b.n	8002388 <prvUnlockQueue+0x52>
					break;
 8002386:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2245      	movs	r2, #69	; 0x45
 800238c:	21ff      	movs	r1, #255	; 0xff
 800238e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002390:	f001 fa86 	bl	80038a0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002394:	f001 fa72 	bl	800387c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002398:	230e      	movs	r3, #14
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	2144      	movs	r1, #68	; 0x44
 80023a0:	5c52      	ldrb	r2, [r2, r1]
 80023a2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023a4:	e013      	b.n	80023ce <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3310      	adds	r3, #16
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 fc20 	bl	8002bf8 <xTaskRemoveFromEventList>
 80023b8:	1e03      	subs	r3, r0, #0
 80023ba:	d001      	beq.n	80023c0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80023bc:	f000 fce0 	bl	8002d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023c0:	210e      	movs	r1, #14
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023ce:	230e      	movs	r3, #14
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	dce5      	bgt.n	80023a6 <prvUnlockQueue+0x70>
 80023da:	e000      	b.n	80023de <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80023dc:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2244      	movs	r2, #68	; 0x44
 80023e2:	21ff      	movs	r1, #255	; 0xff
 80023e4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80023e6:	f001 fa5b 	bl	80038a0 <vPortExitCritical>
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b004      	add	sp, #16
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023fa:	f001 fa3f 	bl	800387c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002406:	2301      	movs	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	e001      	b.n	8002410 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002410:	f001 fa46 	bl	80038a0 <vPortExitCritical>

	return xReturn;
 8002414:	68fb      	ldr	r3, [r7, #12]
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b004      	add	sp, #16
 800241c:	bd80      	pop	{r7, pc}

0800241e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002426:	f001 fa29 	bl	800387c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	429a      	cmp	r2, r3
 8002434:	d102      	bne.n	800243c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002436:	2301      	movs	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e001      	b.n	8002440 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002440:	f001 fa2e 	bl	80038a0 <vPortExitCritical>

	return xReturn;
 8002444:	68fb      	ldr	r3, [r7, #12]
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b004      	add	sp, #16
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e015      	b.n	800248c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <vQueueAddToRegistry+0x4c>)
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	00d2      	lsls	r2, r2, #3
 8002466:	58d3      	ldr	r3, [r2, r3]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10c      	bne.n	8002486 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <vQueueAddToRegistry+0x4c>)
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	00d2      	lsls	r2, r2, #3
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <vQueueAddToRegistry+0x4c>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	18d3      	adds	r3, r2, r3
 800247e:	3304      	adds	r3, #4
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002484:	e005      	b.n	8002492 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3301      	adds	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b07      	cmp	r3, #7
 8002490:	d9e6      	bls.n	8002460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	20001150 	.word	0x20001150

080024a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024b0:	f001 f9e4 	bl	800387c <vPortEnterCritical>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2244      	movs	r2, #68	; 0x44
 80024b8:	5c9b      	ldrb	r3, [r3, r2]
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	d103      	bne.n	80024c8 <vQueueWaitForMessageRestricted+0x28>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2244      	movs	r2, #68	; 0x44
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2245      	movs	r2, #69	; 0x45
 80024cc:	5c9b      	ldrb	r3, [r3, r2]
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	d103      	bne.n	80024dc <vQueueWaitForMessageRestricted+0x3c>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2245      	movs	r2, #69	; 0x45
 80024d8:	2100      	movs	r1, #0
 80024da:	5499      	strb	r1, [r3, r2]
 80024dc:	f001 f9e0 	bl	80038a0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3324      	adds	r3, #36	; 0x24
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fb5b 	bl	8002bac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7ff ff1c 	bl	8002336 <prvUnlockQueue>
	}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b006      	add	sp, #24
 8002504:	bd80      	pop	{r7, pc}

08002506 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002506:	b590      	push	{r4, r7, lr}
 8002508:	b08d      	sub	sp, #52	; 0x34
 800250a:	af04      	add	r7, sp, #16
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	1dbb      	adds	r3, r7, #6
 8002514:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002516:	1dbb      	adds	r3, r7, #6
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	0018      	movs	r0, r3
 800251e:	f001 fa3f 	bl	80039a0 <pvPortMalloc>
 8002522:	0003      	movs	r3, r0
 8002524:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d010      	beq.n	800254e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800252c:	2054      	movs	r0, #84	; 0x54
 800252e:	f001 fa37 	bl	80039a0 <pvPortMalloc>
 8002532:	0003      	movs	r3, r0
 8002534:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
 8002542:	e006      	b.n	8002552 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	0018      	movs	r0, r3
 8002548:	f001 fad0 	bl	8003aec <vPortFree>
 800254c:	e001      	b.n	8002552 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d016      	beq.n	8002586 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002558:	1dbb      	adds	r3, r7, #6
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	683c      	ldr	r4, [r7, #0]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	2300      	movs	r3, #0
 8002564:	9303      	str	r3, [sp, #12]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	0023      	movs	r3, r4
 8002574:	f000 f810 	bl	8002598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f886 	bl	800268c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002580:	2301      	movs	r3, #1
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	e002      	b.n	800258c <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002586:	2301      	movs	r3, #1
 8002588:	425b      	negs	r3, r3
 800258a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800258c:	69bb      	ldr	r3, [r7, #24]
	}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b009      	add	sp, #36	; 0x24
 8002594:	bd90      	pop	{r4, r7, pc}
	...

08002598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4936      	ldr	r1, [pc, #216]	; (8002688 <prvInitialiseNewTask+0xf0>)
 80025ae:	468c      	mov	ip, r1
 80025b0:	4463      	add	r3, ip
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	18d3      	adds	r3, r2, r3
 80025b6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2207      	movs	r2, #7
 80025bc:	4393      	bics	r3, r2
 80025be:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2207      	movs	r2, #7
 80025c4:	4013      	ands	r3, r2
 80025c6:	d001      	beq.n	80025cc <prvInitialiseNewTask+0x34>
 80025c8:	b672      	cpsid	i
 80025ca:	e7fe      	b.n	80025ca <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e013      	b.n	80025fa <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	18d3      	adds	r3, r2, r3
 80025d8:	7818      	ldrb	r0, [r3, #0]
 80025da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025dc:	2134      	movs	r1, #52	; 0x34
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	18d3      	adds	r3, r2, r3
 80025e2:	185b      	adds	r3, r3, r1
 80025e4:	1c02      	adds	r2, r0, #0
 80025e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	18d3      	adds	r3, r2, r3
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b0f      	cmp	r3, #15
 80025fe:	d9e8      	bls.n	80025d2 <prvInitialiseNewTask+0x3a>
 8002600:	e000      	b.n	8002604 <prvInitialiseNewTask+0x6c>
		{
			break;
 8002602:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	2243      	movs	r2, #67	; 0x43
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2b06      	cmp	r3, #6
 8002610:	d901      	bls.n	8002616 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002612:	2306      	movs	r3, #6
 8002614:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	6a3a      	ldr	r2, [r7, #32]
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	2200      	movs	r2, #0
 8002626:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	3304      	adds	r3, #4
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff faa5 	bl	8001b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	3318      	adds	r3, #24
 8002636:	0018      	movs	r0, r3
 8002638:	f7ff faa0 	bl	8001b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002640:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2207      	movs	r2, #7
 8002646:	1ad2      	subs	r2, r2, r3
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002650:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	2200      	movs	r2, #0
 8002656:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	2250      	movs	r2, #80	; 0x50
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	0018      	movs	r0, r3
 8002668:	f001 f878 	bl	800375c <pxPortInitialiseStack>
 800266c:	0002      	movs	r2, r0
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b006      	add	sp, #24
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	3fffffff 	.word	0x3fffffff

0800268c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002694:	f001 f8f2 	bl	800387c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <prvAddNewTaskToReadyList+0xb0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	4b27      	ldr	r3, [pc, #156]	; (800273c <prvAddNewTaskToReadyList+0xb0>)
 80026a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <prvAddNewTaskToReadyList+0xb4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <prvAddNewTaskToReadyList+0xb4>)
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <prvAddNewTaskToReadyList+0xb0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d110      	bne.n	80026da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026b8:	f000 fb7c 	bl	8002db4 <prvInitialiseTaskLists>
 80026bc:	e00d      	b.n	80026da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <prvAddNewTaskToReadyList+0xb8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <prvAddNewTaskToReadyList+0xb4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d802      	bhi.n	80026da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <prvAddNewTaskToReadyList+0xb4>)
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <prvAddNewTaskToReadyList+0xbc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <prvAddNewTaskToReadyList+0xbc>)
 80026e2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <prvAddNewTaskToReadyList+0xc0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d903      	bls.n	80026f8 <prvAddNewTaskToReadyList+0x6c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <prvAddNewTaskToReadyList+0xc0>)
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	0013      	movs	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	189b      	adds	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <prvAddNewTaskToReadyList+0xc4>)
 8002706:	189a      	adds	r2, r3, r2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	0019      	movs	r1, r3
 800270e:	0010      	movs	r0, r2
 8002710:	f7ff fa3f 	bl	8001b92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002714:	f001 f8c4 	bl	80038a0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <prvAddNewTaskToReadyList+0xb8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <prvAddNewTaskToReadyList+0xb4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	429a      	cmp	r2, r3
 800272c:	d201      	bcs.n	8002732 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800272e:	f001 f895 	bl	800385c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b002      	add	sp, #8
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	2000012c 	.word	0x2000012c
 8002740:	2000002c 	.word	0x2000002c
 8002744:	20000138 	.word	0x20000138
 8002748:	20000148 	.word	0x20000148
 800274c:	20000134 	.word	0x20000134
 8002750:	20000030 	.word	0x20000030

08002754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <vTaskDelay+0x48>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <vTaskDelay+0x1e>
 800276e:	b672      	cpsid	i
 8002770:	e7fe      	b.n	8002770 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002772:	f000 f851 	bl	8002818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2100      	movs	r1, #0
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fcb6 	bl	80030ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002780:	f000 f856 	bl	8002830 <xTaskResumeAll>
 8002784:	0003      	movs	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800278e:	f001 f865 	bl	800385c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b004      	add	sp, #16
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	20000154 	.word	0x20000154

080027a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80027a6:	4916      	ldr	r1, [pc, #88]	; (8002800 <vTaskStartScheduler+0x60>)
 80027a8:	4816      	ldr	r0, [pc, #88]	; (8002804 <vTaskStartScheduler+0x64>)
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <vTaskStartScheduler+0x68>)
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2300      	movs	r3, #0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	f7ff fea6 	bl	8002506 <xTaskCreate>
 80027ba:	0003      	movs	r3, r0
 80027bc:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d103      	bne.n	80027cc <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 80027c4:	f000 fce6 	bl	8003194 <xTimerCreateTimerTask>
 80027c8:	0003      	movs	r3, r0
 80027ca:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10d      	bne.n	80027ee <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80027d2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <vTaskStartScheduler+0x6c>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	4252      	negs	r2, r2
 80027da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <vTaskStartScheduler+0x70>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <vTaskStartScheduler+0x74>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80027e8:	f001 f816 	bl	8003818 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80027ec:	e004      	b.n	80027f8 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3301      	adds	r3, #1
 80027f2:	d101      	bne.n	80027f8 <vTaskStartScheduler+0x58>
 80027f4:	b672      	cpsid	i
 80027f6:	e7fe      	b.n	80027f6 <vTaskStartScheduler+0x56>
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	08004444 	.word	0x08004444
 8002804:	08002d95 	.word	0x08002d95
 8002808:	20000150 	.word	0x20000150
 800280c:	2000014c 	.word	0x2000014c
 8002810:	20000138 	.word	0x20000138
 8002814:	20000130 	.word	0x20000130

08002818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <vTaskSuspendAll+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	4b02      	ldr	r3, [pc, #8]	; (800282c <vTaskSuspendAll+0x14>)
 8002824:	601a      	str	r2, [r3, #0]
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000154 	.word	0x20000154

08002830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <xTaskResumeAll+0xf8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <xTaskResumeAll+0x1a>
 8002846:	b672      	cpsid	i
 8002848:	e7fe      	b.n	8002848 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800284a:	f001 f817 	bl	800387c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <xTaskResumeAll+0xf8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	1e5a      	subs	r2, r3, #1
 8002854:	4b34      	ldr	r3, [pc, #208]	; (8002928 <xTaskResumeAll+0xf8>)
 8002856:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002858:	4b33      	ldr	r3, [pc, #204]	; (8002928 <xTaskResumeAll+0xf8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d15b      	bne.n	8002918 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <xTaskResumeAll+0xfc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d057      	beq.n	8002918 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002868:	e02f      	b.n	80028ca <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <xTaskResumeAll+0x100>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3318      	adds	r3, #24
 8002876:	0018      	movs	r0, r3
 8002878:	f7ff f9e3 	bl	8001c42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3304      	adds	r3, #4
 8002880:	0018      	movs	r0, r3
 8002882:	f7ff f9de 	bl	8001c42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288a:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <xTaskResumeAll+0x104>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d903      	bls.n	800289a <xTaskResumeAll+0x6a>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002896:	4b27      	ldr	r3, [pc, #156]	; (8002934 <xTaskResumeAll+0x104>)
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289e:	0013      	movs	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	189b      	adds	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4a24      	ldr	r2, [pc, #144]	; (8002938 <xTaskResumeAll+0x108>)
 80028a8:	189a      	adds	r2, r3, r2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3304      	adds	r3, #4
 80028ae:	0019      	movs	r1, r3
 80028b0:	0010      	movs	r0, r2
 80028b2:	f7ff f96e 	bl	8001b92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <xTaskResumeAll+0x10c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d302      	bcc.n	80028ca <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <xTaskResumeAll+0x110>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <xTaskResumeAll+0x100>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1cb      	bne.n	800286a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80028d8:	f000 fafc 	bl	8002ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <xTaskResumeAll+0x114>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00f      	beq.n	8002908 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80028e8:	f000 f83c 	bl	8002964 <xTaskIncrementTick>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d002      	beq.n	80028f6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <xTaskResumeAll+0x110>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f2      	bne.n	80028e8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <xTaskResumeAll+0x114>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002908:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <xTaskResumeAll+0x110>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002910:	2301      	movs	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002914:	f000 ffa2 	bl	800385c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002918:	f000 ffc2 	bl	80038a0 <vPortExitCritical>

	return xAlreadyYielded;
 800291c:	68bb      	ldr	r3, [r7, #8]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	20000154 	.word	0x20000154
 800292c:	2000012c 	.word	0x2000012c
 8002930:	200000ec 	.word	0x200000ec
 8002934:	20000134 	.word	0x20000134
 8002938:	20000030 	.word	0x20000030
 800293c:	2000002c 	.word	0x2000002c
 8002940:	20000140 	.word	0x20000140
 8002944:	2000013c 	.word	0x2000013c

08002948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <xTaskGetTickCount+0x18>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002954:	687b      	ldr	r3, [r7, #4]
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	20000130 	.word	0x20000130

08002964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <xTaskIncrementTick+0x13c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d000      	beq.n	8002978 <xTaskIncrementTick+0x14>
 8002976:	e083      	b.n	8002a80 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002978:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <xTaskIncrementTick+0x140>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002980:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <xTaskIncrementTick+0x140>)
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d117      	bne.n	80029bc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800298c:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <xTaskIncrementTick+0x144>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <xTaskIncrementTick+0x36>
 8002996:	b672      	cpsid	i
 8002998:	e7fe      	b.n	8002998 <xTaskIncrementTick+0x34>
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <xTaskIncrementTick+0x144>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	4b42      	ldr	r3, [pc, #264]	; (8002aac <xTaskIncrementTick+0x148>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <xTaskIncrementTick+0x144>)
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	4b40      	ldr	r3, [pc, #256]	; (8002aac <xTaskIncrementTick+0x148>)
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <xTaskIncrementTick+0x14c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <xTaskIncrementTick+0x14c>)
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f000 fa8c 	bl	8002ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029bc:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <xTaskIncrementTick+0x150>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d34e      	bcc.n	8002a64 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <xTaskIncrementTick+0x144>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <xTaskIncrementTick+0x70>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <xTaskIncrementTick+0x72>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d004      	beq.n	80029e4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <xTaskIncrementTick+0x150>)
 80029dc:	2201      	movs	r2, #1
 80029de:	4252      	negs	r2, r2
 80029e0:	601a      	str	r2, [r3, #0]
					break;
 80029e2:	e03f      	b.n	8002a64 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <xTaskIncrementTick+0x144>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d203      	bcs.n	8002a04 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <xTaskIncrementTick+0x150>)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	601a      	str	r2, [r3, #0]
						break;
 8002a02:	e02f      	b.n	8002a64 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	3304      	adds	r3, #4
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff f91a 	bl	8001c42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3318      	adds	r3, #24
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7ff f911 	bl	8001c42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <xTaskIncrementTick+0x154>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d903      	bls.n	8002a34 <xTaskIncrementTick+0xd0>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <xTaskIncrementTick+0x154>)
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a38:	0013      	movs	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <xTaskIncrementTick+0x158>)
 8002a42:	189a      	adds	r2, r3, r2
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3304      	adds	r3, #4
 8002a48:	0019      	movs	r1, r3
 8002a4a:	0010      	movs	r0, r2
 8002a4c:	f7ff f8a1 	bl	8001b92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <xTaskIncrementTick+0x15c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d3b3      	bcc.n	80029c6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a62:	e7b0      	b.n	80029c6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <xTaskIncrementTick+0x15c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6a:	4914      	ldr	r1, [pc, #80]	; (8002abc <xTaskIncrementTick+0x158>)
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	189b      	adds	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	585b      	ldr	r3, [r3, r1]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d907      	bls.n	8002a8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e004      	b.n	8002a8a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a80:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <xTaskIncrementTick+0x160>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <xTaskIncrementTick+0x160>)
 8002a88:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <xTaskIncrementTick+0x164>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002a96:	697b      	ldr	r3, [r7, #20]
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b006      	add	sp, #24
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000154 	.word	0x20000154
 8002aa4:	20000130 	.word	0x20000130
 8002aa8:	200000e4 	.word	0x200000e4
 8002aac:	200000e8 	.word	0x200000e8
 8002ab0:	20000144 	.word	0x20000144
 8002ab4:	2000014c 	.word	0x2000014c
 8002ab8:	20000134 	.word	0x20000134
 8002abc:	20000030 	.word	0x20000030
 8002ac0:	2000002c 	.word	0x2000002c
 8002ac4:	2000013c 	.word	0x2000013c
 8002ac8:	20000140 	.word	0x20000140

08002acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <vTaskSwitchContext+0x90>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <vTaskSwitchContext+0x94>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ae0:	e037      	b.n	8002b52 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <vTaskSwitchContext+0x94>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <vTaskSwitchContext+0x98>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	e007      	b.n	8002b00 <vTaskSwitchContext+0x34>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <vTaskSwitchContext+0x2e>
 8002af6:	b672      	cpsid	i
 8002af8:	e7fe      	b.n	8002af8 <vTaskSwitchContext+0x2c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	4919      	ldr	r1, [pc, #100]	; (8002b68 <vTaskSwitchContext+0x9c>)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	0013      	movs	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	189b      	adds	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	585b      	ldr	r3, [r3, r1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ee      	beq.n	8002af0 <vTaskSwitchContext+0x24>
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	0013      	movs	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	189b      	adds	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <vTaskSwitchContext+0x9c>)
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	3308      	adds	r3, #8
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d104      	bne.n	8002b42 <vTaskSwitchContext+0x76>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <vTaskSwitchContext+0xa0>)
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <vTaskSwitchContext+0x98>)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	601a      	str	r2, [r3, #0]
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	20000154 	.word	0x20000154
 8002b60:	20000140 	.word	0x20000140
 8002b64:	20000134 	.word	0x20000134
 8002b68:	20000030 	.word	0x20000030
 8002b6c:	2000002c 	.word	0x2000002c

08002b70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <vTaskPlaceOnEventList+0x14>
 8002b80:	b672      	cpsid	i
 8002b82:	e7fe      	b.n	8002b82 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <vTaskPlaceOnEventList+0x38>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3318      	adds	r3, #24
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0011      	movs	r1, r2
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff f820 	bl	8001bd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 faa6 	bl	80030ec <prvAddCurrentTaskToDelayedList>
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000002c 	.word	0x2000002c

08002bac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <vTaskPlaceOnEventListRestricted+0x16>
 8002bbe:	b672      	cpsid	i
 8002bc0:	e7fe      	b.n	8002bc0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <vTaskPlaceOnEventListRestricted+0x48>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	001a      	movs	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	0011      	movs	r1, r2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fe ffdf 	bl	8001b92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	425b      	negs	r3, r3
 8002bde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0011      	movs	r1, r2
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 fa80 	bl	80030ec <prvAddCurrentTaskToDelayedList>
	}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	2000002c 	.word	0x2000002c

08002bf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <xTaskRemoveFromEventList+0x1a>
 8002c0e:	b672      	cpsid	i
 8002c10:	e7fe      	b.n	8002c10 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3318      	adds	r3, #24
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff f813 	bl	8001c42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <xTaskRemoveFromEventList+0xa0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11d      	bne.n	8002c60 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3304      	adds	r3, #4
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff f80a 	bl	8001c42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <xTaskRemoveFromEventList+0xa4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d903      	bls.n	8002c42 <xTaskRemoveFromEventList+0x4a>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <xTaskRemoveFromEventList+0xa4>)
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c46:	0013      	movs	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	189b      	adds	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <xTaskRemoveFromEventList+0xa8>)
 8002c50:	189a      	adds	r2, r3, r2
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3304      	adds	r3, #4
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f7fe ff9a 	bl	8001b92 <vListInsertEnd>
 8002c5e:	e007      	b.n	8002c70 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3318      	adds	r3, #24
 8002c64:	001a      	movs	r2, r3
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <xTaskRemoveFromEventList+0xac>)
 8002c68:	0011      	movs	r1, r2
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7fe ff91 	bl	8001b92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <xTaskRemoveFromEventList+0xb0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d905      	bls.n	8002c8a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <xTaskRemoveFromEventList+0xb4>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e001      	b.n	8002c8e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000154 	.word	0x20000154
 8002c9c:	20000134 	.word	0x20000134
 8002ca0:	20000030 	.word	0x20000030
 8002ca4:	200000ec 	.word	0x200000ec
 8002ca8:	2000002c 	.word	0x2000002c
 8002cac:	20000140 	.word	0x20000140

08002cb0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <vTaskSetTimeOutState+0x12>
 8002cbe:	b672      	cpsid	i
 8002cc0:	e7fe      	b.n	8002cc0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <vTaskSetTimeOutState+0x2c>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <vTaskSetTimeOutState+0x30>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	605a      	str	r2, [r3, #4]
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000144 	.word	0x20000144
 8002ce0:	20000130 	.word	0x20000130

08002ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <xTaskCheckForTimeOut+0x14>
 8002cf4:	b672      	cpsid	i
 8002cf6:	e7fe      	b.n	8002cf6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <xTaskCheckForTimeOut+0x1e>
 8002cfe:	b672      	cpsid	i
 8002d00:	e7fe      	b.n	8002d00 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8002d02:	f000 fdbb 	bl	800387c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002d06:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <xTaskCheckForTimeOut+0x94>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	d102      	bne.n	8002d1a <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e027      	b.n	8002d6a <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <xTaskCheckForTimeOut+0x98>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d007      	beq.n	8002d36 <xTaskCheckForTimeOut+0x52>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d302      	bcc.n	8002d36 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e019      	b.n	8002d6a <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	1ad2      	subs	r2, r2, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d20f      	bcs.n	8002d66 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	1acb      	subs	r3, r1, r3
 8002d52:	18d2      	adds	r2, r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7ff ffa8 	bl	8002cb0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e001      	b.n	8002d6a <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d6a:	f000 fd99 	bl	80038a0 <vPortExitCritical>

	return xReturn;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b004      	add	sp, #16
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000130 	.word	0x20000130
 8002d7c:	20000144 	.word	0x20000144

08002d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <vTaskMissedYield+0x10>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000140 	.word	0x20000140

08002d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002d9c:	f000 f84e 	bl	8002e3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <prvIdleTask+0x1c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d9f9      	bls.n	8002d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002da8:	f000 fd58 	bl	800385c <vPortYield>
		prvCheckTasksWaitingTermination();
 8002dac:	e7f6      	b.n	8002d9c <prvIdleTask+0x8>
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	20000030 	.word	0x20000030

08002db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	e00c      	b.n	8002dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <prvInitialiseTaskLists+0x68>)
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7fe feb6 	bl	8001b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d9ef      	bls.n	8002dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <prvInitialiseTaskLists+0x6c>)
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fe feac 	bl	8001b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <prvInitialiseTaskLists+0x70>)
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7fe fea8 	bl	8001b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <prvInitialiseTaskLists+0x74>)
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7fe fea4 	bl	8001b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <prvInitialiseTaskLists+0x78>)
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7fe fea0 	bl	8001b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <prvInitialiseTaskLists+0x7c>)
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7fe fe9c 	bl	8001b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <prvInitialiseTaskLists+0x80>)
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <prvInitialiseTaskLists+0x6c>)
 8002e0c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <prvInitialiseTaskLists+0x84>)
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <prvInitialiseTaskLists+0x70>)
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000030 	.word	0x20000030
 8002e20:	200000bc 	.word	0x200000bc
 8002e24:	200000d0 	.word	0x200000d0
 8002e28:	200000ec 	.word	0x200000ec
 8002e2c:	20000100 	.word	0x20000100
 8002e30:	20000118 	.word	0x20000118
 8002e34:	200000e4 	.word	0x200000e4
 8002e38:	200000e8 	.word	0x200000e8

08002e3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e42:	e027      	b.n	8002e94 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 8002e44:	f7ff fce8 	bl	8002818 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <prvCheckTasksWaitingTermination+0x68>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	425a      	negs	r2, r3
 8002e4e:	4153      	adcs	r3, r2
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002e54:	f7ff fcec 	bl	8002830 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d11a      	bne.n	8002e94 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002e5e:	f000 fd0d 	bl	800387c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <prvCheckTasksWaitingTermination+0x68>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7fe fee7 	bl	8001c42 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <prvCheckTasksWaitingTermination+0x6c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <prvCheckTasksWaitingTermination+0x6c>)
 8002e7c:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <prvCheckTasksWaitingTermination+0x70>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <prvCheckTasksWaitingTermination+0x70>)
 8002e86:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002e88:	f000 fd0a 	bl	80038a0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 f80e 	bl	8002eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <prvCheckTasksWaitingTermination+0x70>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1d3      	bne.n	8002e44 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000100 	.word	0x20000100
 8002ea8:	2000012c 	.word	0x2000012c
 8002eac:	20000114 	.word	0x20000114

08002eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 fe15 	bl	8003aec <vPortFree>
			vPortFree( pxTCB );
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f000 fe11 	bl	8003aec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <prvResetNextTaskUnblockTime+0x40>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <prvResetNextTaskUnblockTime+0x14>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <prvResetNextTaskUnblockTime+0x16>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <prvResetNextTaskUnblockTime+0x44>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4252      	negs	r2, r2
 8002ef4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ef6:	e008      	b.n	8002f0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <prvResetNextTaskUnblockTime+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <prvResetNextTaskUnblockTime+0x44>)
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	200000e4 	.word	0x200000e4
 8002f18:	2000014c 	.word	0x2000014c

08002f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <xTaskGetSchedulerState+0x30>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	e008      	b.n	8002f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <xTaskGetSchedulerState+0x34>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	e001      	b.n	8002f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002f42:	687b      	ldr	r3, [r7, #4]
	}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000138 	.word	0x20000138
 8002f50:	20000154 	.word	0x20000154

08002f54 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d04a      	beq.n	8002ffc <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <vTaskPriorityInherit+0xb0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d243      	bcs.n	8002ffc <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db06      	blt.n	8002f8a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <vTaskPriorityInherit+0xb0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	2207      	movs	r2, #7
 8002f84:	1ad2      	subs	r2, r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6959      	ldr	r1, [r3, #20]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f92:	0013      	movs	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <vTaskPriorityInherit+0xb4>)
 8002f9c:	189b      	adds	r3, r3, r2
 8002f9e:	4299      	cmp	r1, r3
 8002fa0:	d101      	bne.n	8002fa6 <vTaskPriorityInherit+0x52>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <vTaskPriorityInherit+0x54>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d022      	beq.n	8002ff2 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7fe fe46 	bl	8001c42 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <vTaskPriorityInherit+0xb0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <vTaskPriorityInherit+0xb8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d903      	bls.n	8002fd4 <vTaskPriorityInherit+0x80>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <vTaskPriorityInherit+0xb8>)
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	0013      	movs	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	189b      	adds	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4a09      	ldr	r2, [pc, #36]	; (8003008 <vTaskPriorityInherit+0xb4>)
 8002fe2:	189a      	adds	r2, r3, r2
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	0019      	movs	r1, r3
 8002fea:	0010      	movs	r0, r2
 8002fec:	f7fe fdd1 	bl	8001b92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ff0:	e004      	b.n	8002ffc <vTaskPriorityInherit+0xa8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ff2:	4b04      	ldr	r3, [pc, #16]	; (8003004 <vTaskPriorityInherit+0xb0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b004      	add	sp, #16
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000002c 	.word	0x2000002c
 8003008:	20000030 	.word	0x20000030
 800300c:	20000134 	.word	0x20000134

08003010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d044      	beq.n	80030b0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003026:	4b25      	ldr	r3, [pc, #148]	; (80030bc <xTaskPriorityDisinherit+0xac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <xTaskPriorityDisinherit+0x24>
 8003030:	b672      	cpsid	i
 8003032:	e7fe      	b.n	8003032 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <xTaskPriorityDisinherit+0x30>
 800303c:	b672      	cpsid	i
 800303e:	e7fe      	b.n	800303e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	1e5a      	subs	r2, r3, #1
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	429a      	cmp	r2, r3
 8003054:	d02c      	beq.n	80030b0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305a:	2b00      	cmp	r3, #0
 800305c:	d128      	bne.n	80030b0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3304      	adds	r3, #4
 8003062:	0018      	movs	r0, r3
 8003064:	f7fe fded 	bl	8001c42 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	2207      	movs	r2, #7
 8003076:	1ad2      	subs	r2, r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <xTaskPriorityDisinherit+0xb0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d903      	bls.n	8003090 <xTaskPriorityDisinherit+0x80>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <xTaskPriorityDisinherit+0xb0>)
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	0013      	movs	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	189b      	adds	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <xTaskPriorityDisinherit+0xb4>)
 800309e:	189a      	adds	r2, r3, r2
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3304      	adds	r3, #4
 80030a4:	0019      	movs	r1, r3
 80030a6:	0010      	movs	r0, r2
 80030a8:	f7fe fd73 	bl	8001b92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80030b0:	68fb      	ldr	r3, [r7, #12]
	}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b004      	add	sp, #16
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	2000002c 	.word	0x2000002c
 80030c0:	20000134 	.word	0x20000134
 80030c4:	20000030 	.word	0x20000030

080030c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <pvTaskIncrementMutexHeldCount+0x20>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <pvTaskIncrementMutexHeldCount+0x20>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030da:	3201      	adds	r2, #1
 80030dc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80030de:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <pvTaskIncrementMutexHeldCount+0x20>)
 80030e0:	681b      	ldr	r3, [r3, #0]
	}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	2000002c 	.word	0x2000002c

080030ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <prvAddCurrentTaskToDelayedList+0x90>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <prvAddCurrentTaskToDelayedList+0x94>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	0018      	movs	r0, r3
 8003104:	f7fe fd9d 	bl	8001c42 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3301      	adds	r3, #1
 800310c:	d10b      	bne.n	8003126 <prvAddCurrentTaskToDelayedList+0x3a>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <prvAddCurrentTaskToDelayedList+0x94>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1d1a      	adds	r2, r3, #4
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <prvAddCurrentTaskToDelayedList+0x98>)
 800311c:	0011      	movs	r1, r2
 800311e:	0018      	movs	r0, r3
 8003120:	f7fe fd37 	bl	8001b92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003124:	e026      	b.n	8003174 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	18d3      	adds	r3, r2, r3
 800312c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <prvAddCurrentTaskToDelayedList+0x94>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	429a      	cmp	r2, r3
 800313c:	d209      	bcs.n	8003152 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <prvAddCurrentTaskToDelayedList+0x94>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3304      	adds	r3, #4
 8003148:	0019      	movs	r1, r3
 800314a:	0010      	movs	r0, r2
 800314c:	f7fe fd43 	bl	8001bd6 <vListInsert>
}
 8003150:	e010      	b.n	8003174 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <prvAddCurrentTaskToDelayedList+0x94>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3304      	adds	r3, #4
 800315c:	0019      	movs	r1, r3
 800315e:	0010      	movs	r0, r2
 8003160:	f7fe fd39 	bl	8001bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d202      	bcs.n	8003174 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	601a      	str	r2, [r3, #0]
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b004      	add	sp, #16
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000130 	.word	0x20000130
 8003180:	2000002c 	.word	0x2000002c
 8003184:	20000118 	.word	0x20000118
 8003188:	200000e8 	.word	0x200000e8
 800318c:	200000e4 	.word	0x200000e4
 8003190:	2000014c 	.word	0x2000014c

08003194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800319e:	f000 faa3 	bl	80036e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <xTimerCreateTimerTask+0x44>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00c      	beq.n	80031c4 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	005a      	lsls	r2, r3, #1
 80031ae:	490b      	ldr	r1, [pc, #44]	; (80031dc <xTimerCreateTimerTask+0x48>)
 80031b0:	480b      	ldr	r0, [pc, #44]	; (80031e0 <xTimerCreateTimerTask+0x4c>)
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <xTimerCreateTimerTask+0x50>)
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2303      	movs	r3, #3
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	f7ff f9a3 	bl	8002506 <xTaskCreate>
 80031c0:	0003      	movs	r3, r0
 80031c2:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <xTimerCreateTimerTask+0x3a>
 80031ca:	b672      	cpsid	i
 80031cc:	e7fe      	b.n	80031cc <xTimerCreateTimerTask+0x38>
	return xReturn;
 80031ce:	687b      	ldr	r3, [r7, #4]
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000188 	.word	0x20000188
 80031dc:	0800444c 	.word	0x0800444c
 80031e0:	08003381 	.word	0x08003381
 80031e4:	2000018c 	.word	0x2000018c

080031e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80031f6:	2028      	movs	r0, #40	; 0x28
 80031f8:	f000 fbd2 	bl	80039a0 <pvPortMalloc>
 80031fc:	0003      	movs	r3, r0
 80031fe:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003206:	683c      	ldr	r4, [r7, #0]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	0023      	movs	r3, r4
 8003218:	f000 f805 	bl	8003226 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800321c:	697b      	ldr	r3, [r7, #20]
	}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b007      	add	sp, #28
 8003224:	bd90      	pop	{r4, r7, pc}

08003226 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <prvInitialiseNewTimer+0x18>
 800323a:	b672      	cpsid	i
 800323c:	e7fe      	b.n	800323c <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d015      	beq.n	8003270 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003244:	f000 fa50 	bl	80036e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	0018      	movs	r0, r3
 800326c:	f7fe fc86 	bl	8001b7c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b004      	add	sp, #16
 8003276:	bd80      	pop	{r7, pc}

08003278 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <xTimerGenericCommand+0x1c>
 8003290:	b672      	cpsid	i
 8003292:	e7fe      	b.n	8003292 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <xTimerGenericCommand+0x94>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d031      	beq.n	8003300 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800329c:	2110      	movs	r1, #16
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	dc1a      	bgt.n	80032ec <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80032b6:	f7ff fe31 	bl	8002f1c <xTaskGetSchedulerState>
 80032ba:	0003      	movs	r3, r0
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d10a      	bne.n	80032d6 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <xTimerGenericCommand+0x94>)
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c6:	2310      	movs	r3, #16
 80032c8:	18f9      	adds	r1, r7, r3
 80032ca:	2300      	movs	r3, #0
 80032cc:	f7fe fd89 	bl	8001de2 <xQueueGenericSend>
 80032d0:	0003      	movs	r3, r0
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e014      	b.n	8003300 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <xTimerGenericCommand+0x94>)
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	2310      	movs	r3, #16
 80032dc:	18f9      	adds	r1, r7, r3
 80032de:	2300      	movs	r3, #0
 80032e0:	2200      	movs	r2, #0
 80032e2:	f7fe fd7e 	bl	8001de2 <xQueueGenericSend>
 80032e6:	0003      	movs	r3, r0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e009      	b.n	8003300 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80032ec:	4b07      	ldr	r3, [pc, #28]	; (800330c <xTimerGenericCommand+0x94>)
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	2310      	movs	r3, #16
 80032f4:	18f9      	adds	r1, r7, r3
 80032f6:	2300      	movs	r3, #0
 80032f8:	f7fe fe37 	bl	8001f6a <xQueueGenericSendFromISR>
 80032fc:	0003      	movs	r3, r0
 80032fe:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003300:	69fb      	ldr	r3, [r7, #28]
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b008      	add	sp, #32
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	20000188 	.word	0x20000188

08003310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af02      	add	r7, sp, #8
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800331a:	4b18      	ldr	r3, [pc, #96]	; (800337c <prvProcessExpiredTimer+0x6c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3304      	adds	r3, #4
 8003328:	0018      	movs	r0, r3
 800332a:	f7fe fc8a 	bl	8001c42 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d119      	bne.n	800336a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	18d1      	adds	r1, r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f8b6 	bl	80034b4 <prvInsertTimerInActiveList>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d00e      	beq.n	800336a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	2300      	movs	r3, #0
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2300      	movs	r3, #0
 8003356:	2100      	movs	r1, #0
 8003358:	f7ff ff8e 	bl	8003278 <xTimerGenericCommand>
 800335c:	0003      	movs	r3, r0
 800335e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <prvProcessExpiredTimer+0x5a>
 8003366:	b672      	cpsid	i
 8003368:	e7fe      	b.n	8003368 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	0010      	movs	r0, r2
 8003372:	4798      	blx	r3
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b004      	add	sp, #16
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000180 	.word	0x20000180

08003380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003388:	2308      	movs	r3, #8
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f851 	bl	8003434 <prvGetNextExpireTime>
 8003392:	0003      	movs	r3, r0
 8003394:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	0011      	movs	r1, r2
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f803 	bl	80033a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80033a2:	f000 f8c9 	bl	8003538 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033a6:	e7ef      	b.n	8003388 <prvTimerTask+0x8>

080033a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80033b2:	f7ff fa31 	bl	8002818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033b6:	2308      	movs	r3, #8
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f85a 	bl	8003474 <prvSampleTimeNow>
 80033c0:	0003      	movs	r3, r0
 80033c2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d129      	bne.n	800341e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10c      	bne.n	80033ea <prvProcessTimerOrBlockTask+0x42>
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d808      	bhi.n	80033ea <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80033d8:	f7ff fa2a 	bl	8002830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff ff94 	bl	8003310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80033e8:	e01b      	b.n	8003422 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033f0:	4b0e      	ldr	r3, [pc, #56]	; (800342c <prvProcessTimerOrBlockTask+0x84>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	425a      	negs	r2, r3
 80033f8:	4153      	adcs	r3, r2
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <prvProcessTimerOrBlockTask+0x88>)
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	0019      	movs	r1, r3
 800340c:	f7ff f848 	bl	80024a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003410:	f7ff fa0e 	bl	8002830 <xTaskResumeAll>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d104      	bne.n	8003422 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8003418:	f000 fa20 	bl	800385c <vPortYield>
}
 800341c:	e001      	b.n	8003422 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800341e:	f7ff fa07 	bl	8002830 <xTaskResumeAll>
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	20000184 	.word	0x20000184
 8003430:	20000188 	.word	0x20000188

08003434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <prvGetNextExpireTime+0x3c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	425a      	negs	r2, r3
 8003444:	4153      	adcs	r3, r2
 8003446:	b2db      	uxtb	r3, r3
 8003448:	001a      	movs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <prvGetNextExpireTime+0x3c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e001      	b.n	8003466 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000180 	.word	0x20000180

08003474 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800347c:	f7ff fa64 	bl	8002948 <xTaskGetTickCount>
 8003480:	0003      	movs	r3, r0
 8003482:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <prvSampleTimeNow+0x3c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	429a      	cmp	r2, r3
 800348c:	d205      	bcs.n	800349a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800348e:	f000 f8d1 	bl	8003634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e002      	b.n	80034a0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <prvSampleTimeNow+0x3c>)
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b004      	add	sp, #16
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000190 	.word	0x20000190

080034b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d812      	bhi.n	8003500 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	1ad2      	subs	r2, r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e01b      	b.n	8003526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <prvInsertTimerInActiveList+0x7c>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3304      	adds	r3, #4
 80034f6:	0019      	movs	r1, r3
 80034f8:	0010      	movs	r0, r2
 80034fa:	f7fe fb6c 	bl	8001bd6 <vListInsert>
 80034fe:	e012      	b.n	8003526 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d206      	bcs.n	8003516 <prvInsertTimerInActiveList+0x62>
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e007      	b.n	8003526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <prvInsertTimerInActiveList+0x80>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3304      	adds	r3, #4
 800351e:	0019      	movs	r1, r3
 8003520:	0010      	movs	r0, r2
 8003522:	f7fe fb58 	bl	8001bd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003526:	697b      	ldr	r3, [r7, #20]
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b006      	add	sp, #24
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000184 	.word	0x20000184
 8003534:	20000180 	.word	0x20000180

08003538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800353e:	e067      	b.n	8003610 <prvProcessReceivedCommands+0xd8>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003540:	2308      	movs	r3, #8
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db61      	blt.n	800360e <prvProcessReceivedCommands+0xd6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800354a:	2308      	movs	r3, #8
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3304      	adds	r3, #4
 800355e:	0018      	movs	r0, r3
 8003560:	f7fe fb6f 	bl	8001c42 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	0018      	movs	r0, r3
 8003568:	f7ff ff84 	bl	8003474 <prvSampleTimeNow>
 800356c:	0003      	movs	r3, r0
 800356e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 8003570:	2308      	movs	r3, #8
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b09      	cmp	r3, #9
 8003578:	d84a      	bhi.n	8003610 <prvProcessReceivedCommands+0xd8>
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <prvProcessReceivedCommands+0xf4>)
 800357e:	18d3      	adds	r3, r2, r3
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003584:	2008      	movs	r0, #8
 8003586:	183b      	adds	r3, r7, r0
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	18d1      	adds	r1, r2, r3
 8003590:	183b      	adds	r3, r7, r0
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	69f8      	ldr	r0, [r7, #28]
 8003598:	f7ff ff8c 	bl	80034b4 <prvInsertTimerInActiveList>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d037      	beq.n	8003610 <prvProcessReceivedCommands+0xd8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	0010      	movs	r0, r2
 80035a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d12e      	bne.n	8003610 <prvProcessReceivedCommands+0xd8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80035b2:	2308      	movs	r3, #8
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	18d2      	adds	r2, r2, r3
 80035be:	69f8      	ldr	r0, [r7, #28]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2300      	movs	r3, #0
 80035c6:	2100      	movs	r1, #0
 80035c8:	f7ff fe56 	bl	8003278 <xTimerGenericCommand>
 80035cc:	0003      	movs	r3, r0
 80035ce:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11c      	bne.n	8003610 <prvProcessReceivedCommands+0xd8>
 80035d6:	b672      	cpsid	i
 80035d8:	e7fe      	b.n	80035d8 <prvProcessReceivedCommands+0xa0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80035da:	2308      	movs	r3, #8
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <prvProcessReceivedCommands+0xb8>
 80035ec:	b672      	cpsid	i
 80035ee:	e7fe      	b.n	80035ee <prvProcessReceivedCommands+0xb6>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	18d1      	adds	r1, r2, r3
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	69f8      	ldr	r0, [r7, #28]
 80035fe:	f7ff ff59 	bl	80034b4 <prvInsertTimerInActiveList>
					break;
 8003602:	e005      	b.n	8003610 <prvProcessReceivedCommands+0xd8>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fa70 	bl	8003aec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800360c:	e000      	b.n	8003610 <prvProcessReceivedCommands+0xd8>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800360e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003610:	4b07      	ldr	r3, [pc, #28]	; (8003630 <prvProcessReceivedCommands+0xf8>)
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	2308      	movs	r3, #8
 8003616:	18f9      	adds	r1, r7, r3
 8003618:	2300      	movs	r3, #0
 800361a:	2200      	movs	r2, #0
 800361c:	f7fe fd16 	bl	800204c <xQueueGenericReceive>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d18d      	bne.n	8003540 <prvProcessReceivedCommands+0x8>
	}
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b008      	add	sp, #32
 800362a:	bd80      	pop	{r7, pc}
 800362c:	080044bc 	.word	0x080044bc
 8003630:	20000188 	.word	0x20000188

08003634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800363a:	e03e      	b.n	80036ba <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800363c:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <prvSwitchTimerLists+0xac>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <prvSwitchTimerLists+0xac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3304      	adds	r3, #4
 8003654:	0018      	movs	r0, r3
 8003656:	f7fe faf4 	bl	8001c42 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	0010      	movs	r0, r2
 8003662:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d126      	bne.n	80036ba <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	18d3      	adds	r3, r2, r3
 8003674:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	429a      	cmp	r2, r3
 800367c:	d90e      	bls.n	800369c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <prvSwitchTimerLists+0xac>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3304      	adds	r3, #4
 8003692:	0019      	movs	r1, r3
 8003694:	0010      	movs	r0, r2
 8003696:	f7fe fa9e 	bl	8001bd6 <vListInsert>
 800369a:	e00e      	b.n	80036ba <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	2300      	movs	r3, #0
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2300      	movs	r3, #0
 80036a6:	2100      	movs	r1, #0
 80036a8:	f7ff fde6 	bl	8003278 <xTimerGenericCommand>
 80036ac:	0003      	movs	r3, r0
 80036ae:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <prvSwitchTimerLists+0x86>
 80036b6:	b672      	cpsid	i
 80036b8:	e7fe      	b.n	80036b8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <prvSwitchTimerLists+0xac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1bb      	bne.n	800363c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <prvSwitchTimerLists+0xac>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <prvSwitchTimerLists+0xb0>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <prvSwitchTimerLists+0xac>)
 80036d0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <prvSwitchTimerLists+0xb0>)
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b006      	add	sp, #24
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000180 	.word	0x20000180
 80036e4:	20000184 	.word	0x20000184

080036e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80036ec:	f000 f8c6 	bl	800387c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80036f0:	4b14      	ldr	r3, [pc, #80]	; (8003744 <prvCheckForValidListAndQueue+0x5c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d120      	bne.n	800373a <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <prvCheckForValidListAndQueue+0x60>)
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7fe fa20 	bl	8001b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <prvCheckForValidListAndQueue+0x64>)
 8003702:	0018      	movs	r0, r3
 8003704:	f7fe fa1c 	bl	8001b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <prvCheckForValidListAndQueue+0x68>)
 800370a:	4a0f      	ldr	r2, [pc, #60]	; (8003748 <prvCheckForValidListAndQueue+0x60>)
 800370c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <prvCheckForValidListAndQueue+0x6c>)
 8003710:	4a0e      	ldr	r2, [pc, #56]	; (800374c <prvCheckForValidListAndQueue+0x64>)
 8003712:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003714:	2200      	movs	r2, #0
 8003716:	210c      	movs	r1, #12
 8003718:	200a      	movs	r0, #10
 800371a:	f7fe fb0e 	bl	8001d3a <xQueueGenericCreate>
 800371e:	0002      	movs	r2, r0
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <prvCheckForValidListAndQueue+0x5c>)
 8003722:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003724:	4b07      	ldr	r3, [pc, #28]	; (8003744 <prvCheckForValidListAndQueue+0x5c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <prvCheckForValidListAndQueue+0x5c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a09      	ldr	r2, [pc, #36]	; (8003758 <prvCheckForValidListAndQueue+0x70>)
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f7fe fe8b 	bl	8002450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800373a:	f000 f8b1 	bl	80038a0 <vPortExitCritical>
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000188 	.word	0x20000188
 8003748:	20000158 	.word	0x20000158
 800374c:	2000016c 	.word	0x2000016c
 8003750:	20000180 	.word	0x20000180
 8003754:	20000184 	.word	0x20000184
 8003758:	08004454 	.word	0x08004454

0800375c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3b04      	subs	r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2280      	movs	r2, #128	; 0x80
 8003772:	0452      	lsls	r2, r2, #17
 8003774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3b04      	subs	r3, #4
 800377a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3b04      	subs	r3, #4
 8003786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003788:	4a08      	ldr	r2, [pc, #32]	; (80037ac <pxPortInitialiseStack+0x50>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3b14      	subs	r3, #20
 8003792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3b20      	subs	r3, #32
 800379e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037a0:	68fb      	ldr	r3, [r7, #12]
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b004      	add	sp, #16
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	080037b1 	.word	0x080037b1

080037b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <prvTaskExitError+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	d001      	beq.n	80037c0 <prvTaskExitError+0x10>
 80037bc:	b672      	cpsid	i
 80037be:	e7fe      	b.n	80037be <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 80037c0:	b672      	cpsid	i
	for( ;; );
 80037c2:	e7fe      	b.n	80037c2 <prvTaskExitError+0x12>
 80037c4:	20000000 	.word	0x20000000

080037c8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80037e0:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <pxCurrentTCBConst2>)
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	3020      	adds	r0, #32
 80037e8:	f380 8809 	msr	PSP, r0
 80037ec:	2002      	movs	r0, #2
 80037ee:	f380 8814 	msr	CONTROL, r0
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80037f8:	46ae      	mov	lr, r5
 80037fa:	bc08      	pop	{r3}
 80037fc:	bc04      	pop	{r2}
 80037fe:	b662      	cpsie	i
 8003800:	4718      	bx	r3
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46c0      	nop			; (mov r8, r8)

08003810 <pxCurrentTCBConst2>:
 8003810:	2000002c 	.word	0x2000002c
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46c0      	nop			; (mov r8, r8)

08003818 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <xPortStartScheduler+0x3c>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <xPortStartScheduler+0x3c>)
 8003822:	21ff      	movs	r1, #255	; 0xff
 8003824:	0409      	lsls	r1, r1, #16
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <xPortStartScheduler+0x3c>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <xPortStartScheduler+0x3c>)
 8003830:	21ff      	movs	r1, #255	; 0xff
 8003832:	0609      	lsls	r1, r1, #24
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003838:	f000 f898 	bl	800396c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <xPortStartScheduler+0x40>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003842:	f7ff ffcd 	bl	80037e0 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003846:	f7ff ffb3 	bl	80037b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800384a:	2300      	movs	r3, #0
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	e000ed20 	.word	0xe000ed20
 8003858:	20000000 	.word	0x20000000

0800385c <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <vPortYield+0x1c>)
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	0552      	lsls	r2, r2, #21
 8003866:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8003868:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800386c:	f3bf 8f6f 	isb	sy
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003880:	b672      	cpsid	i
    uxCriticalNesting++;
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <vPortEnterCritical+0x20>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <vPortEnterCritical+0x20>)
 800388a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800388c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003890:	f3bf 8f6f 	isb	sy
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000000 	.word	0x20000000

080038a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <vPortExitCritical+0x2c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <vPortExitCritical+0x10>
 80038ac:	b672      	cpsid	i
 80038ae:	e7fe      	b.n	80038ae <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <vPortExitCritical+0x2c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	1e5a      	subs	r2, r3, #1
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <vPortExitCritical+0x2c>)
 80038b8:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <vPortExitCritical+0x2c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d100      	bne.n	80038c4 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80038c2:	b662      	cpsie	i
    }
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	20000000 	.word	0x20000000

080038d0 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80038d0:	f3ef 8010 	mrs	r0, PRIMASK
 80038d4:	b672      	cpsid	i
 80038d6:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	0018      	movs	r0, r3

080038dc <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 80038dc:	f380 8810 	msr	PRIMASK, r0
 80038e0:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 80038e2:	46c0      	nop			; (mov r8, r8)
	...

080038f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038f0:	f3ef 8009 	mrs	r0, PSP
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <pxCurrentTCBConst>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	3820      	subs	r0, #32
 80038fa:	6010      	str	r0, [r2, #0]
 80038fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80038fe:	4644      	mov	r4, r8
 8003900:	464d      	mov	r5, r9
 8003902:	4656      	mov	r6, sl
 8003904:	465f      	mov	r7, fp
 8003906:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003908:	b508      	push	{r3, lr}
 800390a:	b672      	cpsid	i
 800390c:	f7ff f8de 	bl	8002acc <vTaskSwitchContext>
 8003910:	b662      	cpsie	i
 8003912:	bc0c      	pop	{r2, r3}
 8003914:	6811      	ldr	r1, [r2, #0]
 8003916:	6808      	ldr	r0, [r1, #0]
 8003918:	3010      	adds	r0, #16
 800391a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800391c:	46a0      	mov	r8, r4
 800391e:	46a9      	mov	r9, r5
 8003920:	46b2      	mov	sl, r6
 8003922:	46bb      	mov	fp, r7
 8003924:	f380 8809 	msr	PSP, r0
 8003928:	3820      	subs	r0, #32
 800392a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800392c:	4718      	bx	r3
 800392e:	46c0      	nop			; (mov r8, r8)

08003930 <pxCurrentTCBConst>:
 8003930:	2000002c 	.word	0x2000002c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46c0      	nop			; (mov r8, r8)

08003938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800393e:	f7ff ffc7 	bl	80038d0 <ulSetInterruptMaskFromISR>
 8003942:	0003      	movs	r3, r0
 8003944:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003946:	f7ff f80d 	bl	8002964 <xTaskIncrementTick>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d003      	beq.n	8003956 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <SysTick_Handler+0x30>)
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	0552      	lsls	r2, r2, #21
 8003954:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f7ff ffbf 	bl	80038dc <vClearInterruptMaskFromISR>
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <vPortSetupTimerInterrupt+0x28>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	23fa      	movs	r3, #250	; 0xfa
 8003976:	0099      	lsls	r1, r3, #2
 8003978:	0010      	movs	r0, r2
 800397a:	f7fc fbc5 	bl	8000108 <__udivsi3>
 800397e:	0003      	movs	r3, r0
 8003980:	001a      	movs	r2, r3
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <vPortSetupTimerInterrupt+0x2c>)
 8003984:	3a01      	subs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <vPortSetupTimerInterrupt+0x30>)
 800398a:	2207      	movs	r2, #7
 800398c:	601a      	str	r2, [r3, #0]
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	2000000c 	.word	0x2000000c
 8003998:	e000e014 	.word	0xe000e014
 800399c:	e000e010 	.word	0xe000e010

080039a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80039ac:	f7fe ff34 	bl	8002818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80039b0:	4b49      	ldr	r3, [pc, #292]	; (8003ad8 <pvPortMalloc+0x138>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80039b8:	f000 f8e0 	bl	8003b7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039bc:	4b47      	ldr	r3, [pc, #284]	; (8003adc <pvPortMalloc+0x13c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4013      	ands	r3, r2
 80039c4:	d000      	beq.n	80039c8 <pvPortMalloc+0x28>
 80039c6:	e079      	b.n	8003abc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80039ce:	2208      	movs	r2, #8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	189b      	adds	r3, r3, r2
 80039d4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2207      	movs	r2, #7
 80039da:	4013      	ands	r3, r2
 80039dc:	d00a      	beq.n	80039f4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2207      	movs	r2, #7
 80039e2:	4393      	bics	r3, r2
 80039e4:	3308      	adds	r3, #8
 80039e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2207      	movs	r2, #7
 80039ec:	4013      	ands	r3, r2
 80039ee:	d001      	beq.n	80039f4 <pvPortMalloc+0x54>
 80039f0:	b672      	cpsid	i
 80039f2:	e7fe      	b.n	80039f2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d060      	beq.n	8003abc <pvPortMalloc+0x11c>
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <pvPortMalloc+0x140>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d85b      	bhi.n	8003abc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a04:	4b37      	ldr	r3, [pc, #220]	; (8003ae4 <pvPortMalloc+0x144>)
 8003a06:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003a08:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <pvPortMalloc+0x144>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a0e:	e004      	b.n	8003a1a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d903      	bls.n	8003a2c <pvPortMalloc+0x8c>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f1      	bne.n	8003a10 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003a2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <pvPortMalloc+0x138>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d042      	beq.n	8003abc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	2308      	movs	r3, #8
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d916      	bls.n	8003a86 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	18d3      	adds	r3, r2, r3
 8003a5e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2207      	movs	r2, #7
 8003a64:	4013      	ands	r3, r2
 8003a66:	d001      	beq.n	8003a6c <pvPortMalloc+0xcc>
 8003a68:	b672      	cpsid	i
 8003a6a:	e7fe      	b.n	8003a6a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 f8db 	bl	8003c3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <pvPortMalloc+0x140>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	1ad2      	subs	r2, r2, r3
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <pvPortMalloc+0x140>)
 8003a92:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <pvPortMalloc+0x140>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <pvPortMalloc+0x148>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d203      	bcs.n	8003aa8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <pvPortMalloc+0x140>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <pvPortMalloc+0x148>)
 8003aa6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <pvPortMalloc+0x13c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003abc:	f7fe feb8 	bl	8002830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2207      	movs	r2, #7
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d001      	beq.n	8003acc <pvPortMalloc+0x12c>
 8003ac8:	b672      	cpsid	i
 8003aca:	e7fe      	b.n	8003aca <pvPortMalloc+0x12a>
	return pvReturn;
 8003acc:	68fb      	ldr	r3, [r7, #12]
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b006      	add	sp, #24
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	2000113c 	.word	0x2000113c
 8003adc:	20001148 	.word	0x20001148
 8003ae0:	20001140 	.word	0x20001140
 8003ae4:	20001134 	.word	0x20001134
 8003ae8:	20001144 	.word	0x20001144

08003aec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d035      	beq.n	8003b6a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003afe:	2308      	movs	r3, #8
 8003b00:	425b      	negs	r3, r3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <vPortFree+0x88>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4013      	ands	r3, r2
 8003b16:	d101      	bne.n	8003b1c <vPortFree+0x30>
 8003b18:	b672      	cpsid	i
 8003b1a:	e7fe      	b.n	8003b1a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <vPortFree+0x3c>
 8003b24:	b672      	cpsid	i
 8003b26:	e7fe      	b.n	8003b26 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <vPortFree+0x88>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4013      	ands	r3, r2
 8003b32:	d01a      	beq.n	8003b6a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d116      	bne.n	8003b6a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <vPortFree+0x88>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b4c:	f7fe fe64 	bl	8002818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <vPortFree+0x8c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	18d2      	adds	r2, r2, r3
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <vPortFree+0x8c>)
 8003b5c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f86b 	bl	8003c3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003b66:	f7fe fe63 	bl	8002830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b004      	add	sp, #16
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	20001148 	.word	0x20001148
 8003b78:	20001140 	.word	0x20001140

08003b7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b82:	23fa      	movs	r3, #250	; 0xfa
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b88:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <prvHeapInit+0xa8>)
 8003b8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2207      	movs	r2, #7
 8003b90:	4013      	ands	r3, r2
 8003b92:	d00c      	beq.n	8003bae <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3307      	adds	r3, #7
 8003b98:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2207      	movs	r2, #7
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1ad2      	subs	r2, r2, r3
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <prvHeapInit+0xa8>)
 8003baa:	18d3      	adds	r3, r2, r3
 8003bac:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <prvHeapInit+0xac>)
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <prvHeapInit+0xac>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	18d3      	adds	r3, r2, r3
 8003bc4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <prvHeapInit+0xb0>)
 8003bda:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003bdc:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <prvHeapInit+0xb0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2200      	movs	r2, #0
 8003be2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <prvHeapInit+0xb0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	1ad2      	subs	r2, r2, r3
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <prvHeapInit+0xb0>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <prvHeapInit+0xb4>)
 8003c08:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <prvHeapInit+0xb8>)
 8003c10:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <prvHeapInit+0xbc>)
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	0612      	lsls	r2, r2, #24
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b004      	add	sp, #16
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	20000194 	.word	0x20000194
 8003c28:	20001134 	.word	0x20001134
 8003c2c:	2000113c 	.word	0x2000113c
 8003c30:	20001144 	.word	0x20001144
 8003c34:	20001140 	.word	0x20001140
 8003c38:	20001148 	.word	0x20001148

08003c3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c44:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <prvInsertBlockIntoFreeList+0xa8>)
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e002      	b.n	8003c50 <prvInsertBlockIntoFreeList+0x14>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d8f7      	bhi.n	8003c4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d108      	bne.n	8003c7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	18d2      	adds	r2, r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	18d2      	adds	r2, r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d118      	bne.n	8003cc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <prvInsertBlockIntoFreeList+0xac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d00d      	beq.n	8003cba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	18d2      	adds	r2, r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e008      	b.n	8003ccc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <prvInsertBlockIntoFreeList+0xac>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e003      	b.n	8003ccc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d002      	beq.n	8003cda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b004      	add	sp, #16
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	20001134 	.word	0x20001134
 8003ce8:	2000113c 	.word	0x2000113c

08003cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cec:	b5b0      	push	{r4, r5, r7, lr}
 8003cee:	b090      	sub	sp, #64	; 0x40
 8003cf0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cf2:	f7fc fa95 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cf6:	f000 f84f 	bl	8003d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cfa:	f000 f8c5 	bl	8003e88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003cfe:	f000 f893 	bl	8003e28 <MX_USART2_UART_Init>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 8003d02:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <main+0x8c>)
 8003d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerOnce, NULL);
 8003d06:	233c      	movs	r3, #60	; 0x3c
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7fd feb6 	bl	8001a80 <osTimerCreate>
 8003d14:	0002      	movs	r2, r0
 8003d16:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <main+0x90>)
 8003d18:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, Task01, osPriorityNormal, 0, 128);
 8003d1a:	2128      	movs	r1, #40	; 0x28
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <main+0x94>)
 8003d20:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003d22:	c331      	stmia	r3!, {r0, r4, r5}
 8003d24:	ca11      	ldmia	r2!, {r0, r4}
 8003d26:	c311      	stmia	r3!, {r0, r4}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fd fe6a 	bl	8001a06 <osThreadCreate>
 8003d32:	0002      	movs	r2, r0
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <main+0x98>)
 8003d36:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Task02, osPriorityNormal, 0, 128);
 8003d38:	2114      	movs	r1, #20
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <main+0x9c>)
 8003d3e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003d40:	c331      	stmia	r3!, {r0, r4, r5}
 8003d42:	ca11      	ldmia	r2!, {r0, r4}
 8003d44:	c311      	stmia	r3!, {r0, r4}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	2100      	movs	r1, #0
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7fd fe5b 	bl	8001a06 <osThreadCreate>
 8003d50:	0002      	movs	r2, r0
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <main+0xa0>)
 8003d54:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, Task03, osPriorityNormal, 0, 128);
 8003d56:	003b      	movs	r3, r7
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <main+0xa4>)
 8003d5a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d5c:	c313      	stmia	r3!, {r0, r1, r4}
 8003d5e:	ca03      	ldmia	r2!, {r0, r1}
 8003d60:	c303      	stmia	r3!, {r0, r1}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8003d62:	003b      	movs	r3, r7
 8003d64:	2100      	movs	r1, #0
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7fd fe4d 	bl	8001a06 <osThreadCreate>
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <main+0xa8>)
 8003d70:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003d72:	f7fd fe40 	bl	80019f6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003d76:	e7fe      	b.n	8003d76 <main+0x8a>
 8003d78:	080040a5 	.word	0x080040a5
 8003d7c:	20001198 	.word	0x20001198
 8003d80:	08004468 	.word	0x08004468
 8003d84:	20001190 	.word	0x20001190
 8003d88:	08004488 	.word	0x08004488
 8003d8c:	20001194 	.word	0x20001194
 8003d90:	080044a8 	.word	0x080044a8
 8003d94:	2000119c 	.word	0x2000119c

08003d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b091      	sub	sp, #68	; 0x44
 8003d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d9e:	2410      	movs	r4, #16
 8003da0:	193b      	adds	r3, r7, r4
 8003da2:	0018      	movs	r0, r3
 8003da4:	2330      	movs	r3, #48	; 0x30
 8003da6:	001a      	movs	r2, r3
 8003da8:	2100      	movs	r1, #0
 8003daa:	f000 fb24 	bl	80043f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dae:	003b      	movs	r3, r7
 8003db0:	0018      	movs	r0, r3
 8003db2:	2310      	movs	r3, #16
 8003db4:	001a      	movs	r2, r3
 8003db6:	2100      	movs	r1, #0
 8003db8:	f000 fb1d 	bl	80043f6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dbc:	0021      	movs	r1, r4
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	2202      	movs	r2, #2
 8003dce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	0252      	lsls	r2, r2, #9
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003dd8:	187b      	adds	r3, r7, r1
 8003dda:	2280      	movs	r2, #128	; 0x80
 8003ddc:	0352      	lsls	r2, r2, #13
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	2200      	movs	r2, #0
 8003de4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7fc fcad 	bl	8000748 <HAL_RCC_OscConfig>
 8003dee:	1e03      	subs	r3, r0, #0
 8003df0:	d001      	beq.n	8003df6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003df2:	f000 f977 	bl	80040e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003df6:	003b      	movs	r3, r7
 8003df8:	2207      	movs	r2, #7
 8003dfa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dfc:	003b      	movs	r3, r7
 8003dfe:	2202      	movs	r2, #2
 8003e00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e02:	003b      	movs	r3, r7
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e08:	003b      	movs	r3, r7
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e0e:	003b      	movs	r3, r7
 8003e10:	2101      	movs	r1, #1
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7fc ff8c 	bl	8000d30 <HAL_RCC_ClockConfig>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d001      	beq.n	8003e20 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003e1c:	f000 f962 	bl	80040e4 <Error_Handler>
  }
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b011      	add	sp, #68	; 0x44
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <MX_USART2_UART_Init+0x5c>)
 8003e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e34:	2296      	movs	r2, #150	; 0x96
 8003e36:	0212      	lsls	r2, r2, #8
 8003e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e4e:	220c      	movs	r2, #12
 8003e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e5e:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <MX_USART2_UART_Init+0x58>)
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fd fb01 	bl	8001474 <HAL_UART_Init>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d001      	beq.n	8003e7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e76:	f000 f935 	bl	80040e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200011a0 	.word	0x200011a0
 8003e84:	40004400 	.word	0x40004400

08003e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b08b      	sub	sp, #44	; 0x2c
 8003e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8e:	2414      	movs	r4, #20
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	0018      	movs	r0, r3
 8003e94:	2314      	movs	r3, #20
 8003e96:	001a      	movs	r2, r3
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f000 faac 	bl	80043f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9e:	4b48      	ldr	r3, [pc, #288]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	0309      	lsls	r1, r1, #12
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	615a      	str	r2, [r3, #20]
 8003eac:	4b44      	ldr	r3, [pc, #272]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	031b      	lsls	r3, r3, #12
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eba:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	03c9      	lsls	r1, r1, #15
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	615a      	str	r2, [r3, #20]
 8003ec8:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	03db      	lsls	r3, r3, #15
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed6:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	0289      	lsls	r1, r1, #10
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	615a      	str	r2, [r3, #20]
 8003ee4:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	029b      	lsls	r3, r3, #10
 8003eec:	4013      	ands	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef2:	4b33      	ldr	r3, [pc, #204]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	02c9      	lsls	r1, r1, #11
 8003efc:	430a      	orrs	r2, r1
 8003efe:	615a      	str	r2, [r3, #20]
 8003f00:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <MX_GPIO_Init+0x138>)
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	02db      	lsls	r3, r3, #11
 8003f08:	4013      	ands	r3, r2
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f0e:	2390      	movs	r3, #144	; 0x90
 8003f10:	05db      	lsls	r3, r3, #23
 8003f12:	2200      	movs	r2, #0
 8003f14:	2120      	movs	r1, #32
 8003f16:	0018      	movs	r0, r3
 8003f18:	f7fc fbe7 	bl	80006ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED2_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003f1c:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <MX_GPIO_Init+0x13c>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2178      	movs	r1, #120	; 0x78
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fc fbe1 	bl	80006ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	0192      	lsls	r2, r2, #6
 8003f2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f30:	193b      	adds	r3, r7, r4
 8003f32:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <MX_GPIO_Init+0x140>)
 8003f34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <MX_GPIO_Init+0x144>)
 8003f40:	0019      	movs	r1, r3
 8003f42:	0010      	movs	r0, r2
 8003f44:	f7fc fa40 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f4e:	193b      	adds	r3, r7, r4
 8003f50:	2201      	movs	r2, #1
 8003f52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	193b      	adds	r3, r7, r4
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5a:	193b      	adds	r3, r7, r4
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003f60:	193a      	adds	r2, r7, r4
 8003f62:	2390      	movs	r3, #144	; 0x90
 8003f64:	05db      	lsls	r3, r3, #23
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7fc fa2d 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin|LED1_Pin|LED3_Pin;
 8003f6e:	0021      	movs	r1, r4
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	2278      	movs	r2, #120	; 0x78
 8003f74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	2201      	movs	r2, #1
 8003f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	2200      	movs	r2, #0
 8003f86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f88:	000c      	movs	r4, r1
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <MX_GPIO_Init+0x13c>)
 8003f8e:	0019      	movs	r1, r3
 8003f90:	0010      	movs	r0, r2
 8003f92:	f7fc fa19 	bl	80003c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8003f96:	0021      	movs	r1, r4
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	2280      	movs	r2, #128	; 0x80
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa0:	187b      	adds	r3, r7, r1
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <MX_GPIO_Init+0x13c>)
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	0010      	movs	r0, r2
 8003fb4:	f7fc fa08 	bl	80003c8 <HAL_GPIO_Init>

}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b00b      	add	sp, #44	; 0x2c
 8003fbe:	bd90      	pop	{r4, r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	48000400 	.word	0x48000400
 8003fc8:	10210000 	.word	0x10210000
 8003fcc:	48000800 	.word	0x48000800

08003fd0 <Task01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task01 */
void Task01(void const * argument)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
    

  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (timerflag == 1) {
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <Task01+0x3c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d1fb      	bne.n	8003fd8 <Task01+0x8>
			timerflag = 0;
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <Task01+0x3c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
			timerflag2 = timerflag2 + 1;
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <Task01+0x40>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <Task01+0x40>)
 8003fee:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <Task01+0x44>)
 8003ff2:	2108      	movs	r1, #8
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7fc fb95 	bl	8000724 <HAL_GPIO_TogglePin>
			osTimerStart(myTimer01Handle, 1000);
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <Task01+0x48>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	23fa      	movs	r3, #250	; 0xfa
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	0019      	movs	r1, r3
 8004004:	0010      	movs	r0, r2
 8004006:	f7fd fd5b 	bl	8001ac0 <osTimerStart>
		if (timerflag == 1) {
 800400a:	e7e5      	b.n	8003fd8 <Task01+0x8>
 800400c:	20000004 	.word	0x20000004
 8004010:	20000008 	.word	0x20000008
 8004014:	48000400 	.word	0x48000400
 8004018:	20001198 	.word	0x20001198

0800401c <Task02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task02 */
void Task02(void const * argument)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02 */
	/* Infinite loop */
	for (;;) {
		if (timerflag2 == 3) {
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <Task02+0x34>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d1fb      	bne.n	8004024 <Task02+0x8>
			timerflag2 = 0;
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <Task02+0x34>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <Task02+0x38>)
 8004034:	2120      	movs	r1, #32
 8004036:	0018      	movs	r0, r3
 8004038:	f7fc fb74 	bl	8000724 <HAL_GPIO_TogglePin>
			osTimerStart(myTimer01Handle, 1000);
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <Task02+0x3c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	23fa      	movs	r3, #250	; 0xfa
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	0019      	movs	r1, r3
 8004046:	0010      	movs	r0, r2
 8004048:	f7fd fd3a 	bl	8001ac0 <osTimerStart>
		if (timerflag2 == 3) {
 800404c:	e7ea      	b.n	8004024 <Task02+0x8>
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	20000008 	.word	0x20000008
 8004054:	48000400 	.word	0x48000400
 8004058:	20001198 	.word	0x20001198

0800405c <Task03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03 */
void Task03(void const * argument)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03 */
  /* Infinite loop */
  for(;;)
  {
	  if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button_GPIO_Port,Button_Pin)){
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <Task03+0x44>)
 800406a:	0019      	movs	r1, r3
 800406c:	0010      	movs	r0, r2
 800406e:	f7fc fb1f 	bl	80006b0 <HAL_GPIO_ReadPin>
 8004072:	1e03      	subs	r3, r0, #0
 8004074:	d1f6      	bne.n	8004064 <Task03+0x8>
	      	while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button_GPIO_Port,Button_Pin));
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <Task03+0x44>)
 800407e:	0019      	movs	r1, r3
 8004080:	0010      	movs	r0, r2
 8004082:	f7fc fb15 	bl	80006b0 <HAL_GPIO_ReadPin>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d0f6      	beq.n	8004078 <Task03+0x1c>
	      	osDelay(400);
 800408a:	23c8      	movs	r3, #200	; 0xc8
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	0018      	movs	r0, r3
 8004090:	f7fd fce1 	bl	8001a56 <osDelay>
	      	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8004094:	4b02      	ldr	r3, [pc, #8]	; (80040a0 <Task03+0x44>)
 8004096:	2110      	movs	r1, #16
 8004098:	0018      	movs	r0, r3
 800409a:	f7fc fb43 	bl	8000724 <HAL_GPIO_TogglePin>
	  if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Button_GPIO_Port,Button_Pin)){
 800409e:	e7e1      	b.n	8004064 <Task03+0x8>
 80040a0:	48000400 	.word	0x48000400

080040a4 <Callback01>:
  /* USER CODE END Task03 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

	timerflag = 1;
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <Callback01+0x18>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
  /* USER CODE END Callback01 */
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b002      	add	sp, #8
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	20000004 	.word	0x20000004

080040c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80040d2:	f7fc f8b9 	bl	8000248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	b002      	add	sp, #8
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	40012c00 	.word	0x40012c00

080040e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_MspInit+0x50>)
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_MspInit+0x50>)
 80040fc:	2101      	movs	r1, #1
 80040fe:	430a      	orrs	r2, r1
 8004100:	619a      	str	r2, [r3, #24]
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <HAL_MspInit+0x50>)
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2201      	movs	r2, #1
 8004108:	4013      	ands	r3, r2
 800410a:	607b      	str	r3, [r7, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <HAL_MspInit+0x50>)
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_MspInit+0x50>)
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	0549      	lsls	r1, r1, #21
 8004118:	430a      	orrs	r2, r1
 800411a:	61da      	str	r2, [r3, #28]
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_MspInit+0x50>)
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	055b      	lsls	r3, r3, #21
 8004124:	4013      	ands	r3, r2
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800412a:	2302      	movs	r3, #2
 800412c:	425b      	negs	r3, r3
 800412e:	2200      	movs	r2, #0
 8004130:	2103      	movs	r1, #3
 8004132:	0018      	movs	r0, r3
 8004134:	f7fc f922 	bl	800037c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	2314      	movs	r3, #20
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	0018      	movs	r0, r3
 8004152:	2314      	movs	r3, #20
 8004154:	001a      	movs	r2, r3
 8004156:	2100      	movs	r1, #0
 8004158:	f000 f94d 	bl	80043f6 <memset>
  if(huart->Instance==USART2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_UART_MspInit+0x90>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d132      	bne.n	80041cc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004166:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <HAL_UART_MspInit+0x94>)
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_UART_MspInit+0x94>)
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	0289      	lsls	r1, r1, #10
 8004170:	430a      	orrs	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <HAL_UART_MspInit+0x94>)
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	029b      	lsls	r3, r3, #10
 800417c:	4013      	ands	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <HAL_UART_MspInit+0x94>)
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <HAL_UART_MspInit+0x94>)
 8004188:	2180      	movs	r1, #128	; 0x80
 800418a:	0289      	lsls	r1, r1, #10
 800418c:	430a      	orrs	r2, r1
 800418e:	615a      	str	r2, [r3, #20]
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_UART_MspInit+0x94>)
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	029b      	lsls	r3, r3, #10
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800419e:	2114      	movs	r1, #20
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	220c      	movs	r2, #12
 80041a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	2202      	movs	r2, #2
 80041aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	2200      	movs	r2, #0
 80041b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80041b8:	187b      	adds	r3, r7, r1
 80041ba:	2201      	movs	r2, #1
 80041bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041be:	187a      	adds	r2, r7, r1
 80041c0:	2390      	movs	r3, #144	; 0x90
 80041c2:	05db      	lsls	r3, r3, #23
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f7fc f8fe 	bl	80003c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b00a      	add	sp, #40	; 0x28
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40004400 	.word	0x40004400
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	; 0x28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	0019      	movs	r1, r3
 80041f2:	200d      	movs	r0, #13
 80041f4:	f7fc f8c2 	bl	800037c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 80041f8:	200d      	movs	r0, #13
 80041fa:	f7fc f8d4 	bl	80003a6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80041fe:	4b21      	ldr	r3, [pc, #132]	; (8004284 <HAL_InitTick+0xa8>)
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_InitTick+0xa8>)
 8004204:	2180      	movs	r1, #128	; 0x80
 8004206:	0109      	lsls	r1, r1, #4
 8004208:	430a      	orrs	r2, r1
 800420a:	619a      	str	r2, [r3, #24]
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_InitTick+0xa8>)
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	4013      	ands	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800421a:	230c      	movs	r3, #12
 800421c:	18fa      	adds	r2, r7, r3
 800421e:	2310      	movs	r3, #16
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f7fc feef 	bl	8001008 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800422a:	f7fc fed7 	bl	8000fdc <HAL_RCC_GetPCLK1Freq>
 800422e:	0003      	movs	r3, r0
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	4914      	ldr	r1, [pc, #80]	; (8004288 <HAL_InitTick+0xac>)
 8004236:	0018      	movs	r0, r3
 8004238:	f7fb ff66 	bl	8000108 <__udivsi3>
 800423c:	0003      	movs	r3, r0
 800423e:	3b01      	subs	r3, #1
 8004240:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_InitTick+0xb0>)
 8004244:	4a12      	ldr	r2, [pc, #72]	; (8004290 <HAL_InitTick+0xb4>)
 8004246:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_InitTick+0xb0>)
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <HAL_InitTick+0xb8>)
 800424c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <HAL_InitTick+0xb0>)
 8004250:	6a3a      	ldr	r2, [r7, #32]
 8004252:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004254:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_InitTick+0xb0>)
 8004256:	2200      	movs	r2, #0
 8004258:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <HAL_InitTick+0xb0>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HAL_InitTick+0xb0>)
 8004262:	0018      	movs	r0, r3
 8004264:	f7fc fefa 	bl	800105c <HAL_TIM_Base_Init>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d105      	bne.n	8004278 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <HAL_InitTick+0xb0>)
 800426e:	0018      	movs	r0, r3
 8004270:	f7fc ff28 	bl	80010c4 <HAL_TIM_Base_Start_IT>
 8004274:	0003      	movs	r3, r0
 8004276:	e000      	b.n	800427a <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b00a      	add	sp, #40	; 0x28
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	40021000 	.word	0x40021000
 8004288:	000f4240 	.word	0x000f4240
 800428c:	20001210 	.word	0x20001210
 8004290:	40012c00 	.word	0x40012c00
 8004294:	000003e7 	.word	0x000003e7

08004298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042a6:	e7fe      	b.n	80042a6 <HardFault_Handler+0x4>

080042a8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80042ae:	0018      	movs	r0, r3
 80042b0:	f7fc ff21 	bl	80010f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	20001210 	.word	0x20001210

080042c0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80042c4:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <SystemInit+0x70>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <SystemInit+0x70>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80042d0:	4b17      	ldr	r3, [pc, #92]	; (8004330 <SystemInit+0x70>)
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	4b16      	ldr	r3, [pc, #88]	; (8004330 <SystemInit+0x70>)
 80042d6:	4917      	ldr	r1, [pc, #92]	; (8004334 <SystemInit+0x74>)
 80042d8:	400a      	ands	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <SystemInit+0x70>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <SystemInit+0x70>)
 80042e2:	4915      	ldr	r1, [pc, #84]	; (8004338 <SystemInit+0x78>)
 80042e4:	400a      	ands	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <SystemInit+0x70>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <SystemInit+0x70>)
 80042ee:	4913      	ldr	r1, [pc, #76]	; (800433c <SystemInit+0x7c>)
 80042f0:	400a      	ands	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <SystemInit+0x70>)
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <SystemInit+0x70>)
 80042fa:	4911      	ldr	r1, [pc, #68]	; (8004340 <SystemInit+0x80>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <SystemInit+0x70>)
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <SystemInit+0x70>)
 8004306:	210f      	movs	r1, #15
 8004308:	438a      	bics	r2, r1
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <SystemInit+0x70>)
 800430e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <SystemInit+0x70>)
 8004312:	490c      	ldr	r1, [pc, #48]	; (8004344 <SystemInit+0x84>)
 8004314:	400a      	ands	r2, r1
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <SystemInit+0x70>)
 800431a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <SystemInit+0x70>)
 800431e:	2101      	movs	r1, #1
 8004320:	438a      	bics	r2, r1
 8004322:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004324:	4b02      	ldr	r3, [pc, #8]	; (8004330 <SystemInit+0x70>)
 8004326:	2200      	movs	r2, #0
 8004328:	609a      	str	r2, [r3, #8]

}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	08ffb80c 	.word	0x08ffb80c
 8004338:	fef6ffff 	.word	0xfef6ffff
 800433c:	fffbffff 	.word	0xfffbffff
 8004340:	ffc0ffff 	.word	0xffc0ffff
 8004344:	fffffeec 	.word	0xfffffeec

08004348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004348:	480d      	ldr	r0, [pc, #52]	; (8004380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800434a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <LoopForever+0x6>)
  ldr r1, =_edata
 800434e:	490e      	ldr	r1, [pc, #56]	; (8004388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004350:	4a0e      	ldr	r2, [pc, #56]	; (800438c <LoopForever+0xe>)
  movs r3, #0
 8004352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004354:	e002      	b.n	800435c <LoopCopyDataInit>

08004356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800435a:	3304      	adds	r3, #4

0800435c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800435c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800435e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004360:	d3f9      	bcc.n	8004356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004362:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004364:	4c0b      	ldr	r4, [pc, #44]	; (8004394 <LoopForever+0x16>)
  movs r3, #0
 8004366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004368:	e001      	b.n	800436e <LoopFillZerobss>

0800436a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800436a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800436c:	3204      	adds	r2, #4

0800436e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800436e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004370:	d3fb      	bcc.n	800436a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004372:	f7ff ffa5 	bl	80042c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004376:	f000 f811 	bl	800439c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800437a:	f7ff fcb7 	bl	8003cec <main>

0800437e <LoopForever>:

LoopForever:
    b LoopForever
 800437e:	e7fe      	b.n	800437e <LoopForever>
  ldr   r0, =_estack
 8004380:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004388:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800438c:	08004504 	.word	0x08004504
  ldr r2, =_sbss
 8004390:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004394:	20001250 	.word	0x20001250

08004398 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004398:	e7fe      	b.n	8004398 <ADC1_IRQHandler>
	...

0800439c <__libc_init_array>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	2600      	movs	r6, #0
 80043a0:	4d0c      	ldr	r5, [pc, #48]	; (80043d4 <__libc_init_array+0x38>)
 80043a2:	4c0d      	ldr	r4, [pc, #52]	; (80043d8 <__libc_init_array+0x3c>)
 80043a4:	1b64      	subs	r4, r4, r5
 80043a6:	10a4      	asrs	r4, r4, #2
 80043a8:	42a6      	cmp	r6, r4
 80043aa:	d109      	bne.n	80043c0 <__libc_init_array+0x24>
 80043ac:	2600      	movs	r6, #0
 80043ae:	f000 f82b 	bl	8004408 <_init>
 80043b2:	4d0a      	ldr	r5, [pc, #40]	; (80043dc <__libc_init_array+0x40>)
 80043b4:	4c0a      	ldr	r4, [pc, #40]	; (80043e0 <__libc_init_array+0x44>)
 80043b6:	1b64      	subs	r4, r4, r5
 80043b8:	10a4      	asrs	r4, r4, #2
 80043ba:	42a6      	cmp	r6, r4
 80043bc:	d105      	bne.n	80043ca <__libc_init_array+0x2e>
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	00b3      	lsls	r3, r6, #2
 80043c2:	58eb      	ldr	r3, [r5, r3]
 80043c4:	4798      	blx	r3
 80043c6:	3601      	adds	r6, #1
 80043c8:	e7ee      	b.n	80043a8 <__libc_init_array+0xc>
 80043ca:	00b3      	lsls	r3, r6, #2
 80043cc:	58eb      	ldr	r3, [r5, r3]
 80043ce:	4798      	blx	r3
 80043d0:	3601      	adds	r6, #1
 80043d2:	e7f2      	b.n	80043ba <__libc_init_array+0x1e>
 80043d4:	080044fc 	.word	0x080044fc
 80043d8:	080044fc 	.word	0x080044fc
 80043dc:	080044fc 	.word	0x080044fc
 80043e0:	08004500 	.word	0x08004500

080043e4 <memcpy>:
 80043e4:	2300      	movs	r3, #0
 80043e6:	b510      	push	{r4, lr}
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d100      	bne.n	80043ee <memcpy+0xa>
 80043ec:	bd10      	pop	{r4, pc}
 80043ee:	5ccc      	ldrb	r4, [r1, r3]
 80043f0:	54c4      	strb	r4, [r0, r3]
 80043f2:	3301      	adds	r3, #1
 80043f4:	e7f8      	b.n	80043e8 <memcpy+0x4>

080043f6 <memset>:
 80043f6:	0003      	movs	r3, r0
 80043f8:	1812      	adds	r2, r2, r0
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d100      	bne.n	8004400 <memset+0xa>
 80043fe:	4770      	bx	lr
 8004400:	7019      	strb	r1, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	e7f9      	b.n	80043fa <memset+0x4>
	...

08004408 <_init>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr

08004414 <_fini>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441a:	bc08      	pop	{r3}
 800441c:	469e      	mov	lr, r3
 800441e:	4770      	bx	lr
